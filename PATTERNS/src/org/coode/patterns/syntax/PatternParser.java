/* Generated By:JJTree&JavaCC: Do not edit this line. PatternParser.java */
package org.coode.patterns.syntax;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.coode.oppl.OPPLScript;
import org.coode.oppl.variablemansyntax.ConstraintSystem;
import org.coode.oppl.variablemansyntax.ExpressionParser;
import org.coode.oppl.variablemansyntax.Variable;
import org.coode.oppl.variablemansyntax.VariableManchesterOWLSyntaxParser;
import org.coode.oppl.variablemansyntax.VariableType;
import org.coode.oppl.variablemansyntax.generated.AbstractCollectionGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.Attribute;
import org.coode.oppl.variablemansyntax.generated.ConcatGeneratedValues;
import org.coode.oppl.variablemansyntax.generated.SingleValueGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.SingleValueGeneratedVariable;
import org.coode.oppl.variablemansyntax.generated.RegExpGenerated;
import org.coode.oppl.variablemansyntax.generated.StringGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.VariableIndexGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.factory.AttributeFactory;
import org.coode.patterns.AbstractPatternModelFactory;
import org.coode.patterns.InstantiatedPatternModel;
import org.coode.patterns.PatternConstant;
import org.coode.patterns.PatternConstraintSystem;
import org.coode.patterns.PatternException;
import org.coode.patterns.PatternModel;
import org.coode.patterns.PatternOPPLScript;
import org.coode.patterns.PatternSignature;
import org.coode.patterns.utils.ParserFactory;
import org.coode.patterns.utils.Utils;
import org.protege.editor.owl.model.OWLModelManager;
import org.semanticweb.owl.apibinding.OWLManager;
import org.semanticweb.owl.expression.ParserException;
import org.semanticweb.owl.inference.OWLReasoner;
import org.semanticweb.owl.model.OWLAxiom;
import org.semanticweb.owl.model.OWLClass;
import org.semanticweb.owl.model.OWLDataFactory;
import org.semanticweb.owl.model.OWLEntity;
import org.semanticweb.owl.model.OWLObject;
import org.semanticweb.owl.model.OWLOntology;
import org.semanticweb.owl.model.OWLOntologyManager;

public class PatternParser/*@bgen(jjtree)*/implements PatternParserTreeConstants, PatternParserConstants {/*@bgen(jjtree)*/
  protected JJTPatternParserState jjtree = new JJTPatternParserState();private OWLOntologyManager owlOntologyManager;
        //private static PatternConstraintSystem constraintSystem;
        private OWLReasoner reasoner;
        private AbstractPatternModelFactory modelFactory;
        private String unresolvedString ="";
        private List<PatternOPPLScript> dependencies = new ArrayList<PatternOPPLScript>();
        private Set<String> visited= new HashSet<String>();
        //Unchecked on purpose as it must contain both OWLObject instances and String
        private List completions = new ArrayList();

        public List getCompletions(){
                return this.completions;
        }


        public void addVisited(String patternName){
                visited.add(patternName);
        }

        public void setPatternModelFactory(AbstractPatternModelFactory mf){
                modelFactory = mf;
        }

        public AbstractPatternModelFactory getPatternModelFactory(){
                return modelFactory;
        }

        public OWLReasoner getReasoner(){
                return reasoner;
        }

        public OWLDataFactory getOWLDataFactory(){
                return owlOntologyManager.getOWLDataFactory();
        }

        public OWLOntologyManager getOWLOntologyManager(){
                return owlOntologyManager;
        }

        public PatternParser(java.io.InputStream in, OWLOntologyManager m, OWLReasoner r){
                this(in);
                owlOntologyManager = m;
                reasoner = r;
        }

        public void ReInit(Reader reader, OWLOntologyManager m,  OWLReasoner r) {
                ReInit(reader);
                owlOntologyManager  = m;
                reasoner = r;
        }

        public PatternParser(Reader reader, OWLOntologyManager m) {
                this(reader);
                owlOntologyManager = m;
        }

        public PatternParser(Reader reader, OWLOntologyManager m, OWLReasoner r) {
                this(reader,m);
                reasoner = r;
        }

        public void initOPPLParser(String s, OWLOntology o){
                modelFactory.setOPPLParser(org.coode.oppl.utils.ParserFactory.initParser(s, o, owlOntologyManager, null));
        }

        public void initProtegeOPPLParser(String s, OWLModelManager modelManager){
                modelFactory.setOPPLParser(org.coode.oppl.utils.ProtegeParserFactory.initParser(s, modelManager, null));
        }


        public void setVisited(Set<String> visitedPatternNames) {
                this.visited = visitedPatternNames;
        }

  public static void main(String args[]) {
        String ontologyURIString = args[0];
        OWLOntologyManager ontologyManager = OWLManager.createOWLOntologyManager();
        try {
                OWLOntology ontology = ontologyManager.loadOntology(URI.create(ontologyURIString));
        System.out.println("Reading from  standard input...");
        System.out.print("Enter an expression: ");
                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
                String line = reader.readLine();
                PatternParser parser = ParserFactory.initParser(line, ontology, ontologyManager);
                parser.Start();
                System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      e.printStackTrace();
      System.out.println(e.getMessage());
    }
  }

  final public PatternOPPLScript Start() throws ParseException {
                           /*@bgen(jjtree) Start */
PatternStart jjtn000 = new PatternStart(JJTSTART);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);OPPLScript opplStatement;
String rendering=null;
InstantiatedPatternModel instantiatedPatternModel=null;
Variable returnVariable=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
        instantiatedPatternModel = patternInstantiation();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                for (PatternOPPLScript dependency : this.dependencies) {
                        instantiatedPatternModel.addDependency(dependency);
                }
                instantiatedPatternModel.setUnresolvedOPPLStatement(unresolvedString);
                {if (true) return instantiatedPatternModel;}
        break;
      default:
        jj_la1[1] = jj_gen;
        opplStatement = OPPLPatternStatement(modelFactory.createConstraintSystem());
        rendering = Rendering(opplStatement.getConstraintSystem());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          returnVariable = returnClause((PatternConstraintSystem)opplStatement.getConstraintSystem());
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                PatternModel toReturn = modelFactory.createPatternModel(opplStatement);
                toReturn.setUnresolvedOPPLStatement(unresolvedString);
                toReturn.setRendering(rendering);
                for (PatternOPPLScript dependency : this.dependencies) {
                toReturn.addDependency(dependency);
        }
                toReturn.setReturnVariable(returnVariable);
                {if (true) return toReturn;}
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Variable returnClause(PatternConstraintSystem constraintSystem) throws ParseException {
                                                                       Token t=null;
    if (jj_2_1(2)) {
      jj_consume_token(RETURN);
      t = jj_consume_token(VARIABLENAME);
                Variable v = constraintSystem.getVariable(t.image);
                if(v!=null){{if (true) return v;}}else{{if (true) throw new ParseException("Undefined Variable "+ t.image);}}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
        t = jj_consume_token(THISCLASS);
                                  {if (true) return constraintSystem.getThisClassVariable();}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public InstantiatedPatternModel patternInstantiation() throws ParseException {
                                                       Token t;List<List<String>> args;PatternSignature signature = null;
    jj_consume_token(DOLLAR);
                this.completions.clear();
                Set<String> possibleNames = Utils.getExistingPatternNames(getOWLOntologyManager());
                for(String name: possibleNames){
                        this.completions.add("$"+name);
                }
    t = jj_consume_token(IDENTIFIER);
                this.completions.clear();
                possibleNames = Utils.getExistingPatternNames(getOWLOntologyManager(),t.image);
                for(String name: possibleNames){
                        this.completions.add("$"+name);
                }
    jj_consume_token(OPENPARENTHESYS);
                try{
                        signature = new PatternSignature(t.image, getOWLOntologyManager(), this.modelFactory);
                }catch (PatternException e) {
                        {if (true) throw new ParseException(e.getMessage(), e);}
                }
    args = argList(signature);
    jj_consume_token(CLOSEDPARENTHESYS);
                try {
                        this.completions.clear();
                        InstantiatedPatternModel resolvedPattern =
                                signature.getPattern().getConstraintSystem().resolvePatternInstantiation(
                                        t.image,
                                        owlOntologyManager,
                                        this.visited,
                                        this.dependencies,
                                        args.toArray(new List[args.size()]));
                        unresolvedString = "$"+t.image+"(";
                        boolean first = true;
                        for(List<String> anArgument: args){
                                if(!first){unresolvedString+=", ";}else{first = false;}
                                if(anArgument.size()==1){
                                        unresolvedString+=anArgument.iterator().next();
                                }else{
                                        boolean firstSubArg= true;
                                        unresolvedString+="{";
                                        for(String subArg: anArgument){
                                                unresolvedString+=firstSubArg?subArg:", "+subArg;
                                                firstSubArg=firstSubArg?false:firstSubArg;
                                        }
                                        unresolvedString+="}";
                                }
                        }
                        unresolvedString+=")";
                        {if (true) return resolvedPattern;}
                } catch (PatternException e) {{if (true) throw new ParseException(e.getMessage(), e);}}
    throw new Error("Missing return statement in function");
  }

  OPPLScript OPPLPatternStatement(PatternConstraintSystem constraintSystem) throws ParseException {
                                                                          /*@bgen(jjtree) OPPLPatternStatement */
     PatternOPPLPatternStatement jjtn000 = new PatternOPPLPatternStatement(JJTOPPLPATTERNSTATEMENT);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {StringBuilder stringbuilder = new StringBuilder();
        this.unresolvedString = "";
        Token t;
        while (true) {
                t = this.getToken(1);
                if (t.kind == EOF) {break;}
                else {
                        stringbuilder.append(this.resolvedString(constraintSystem, true));
                        stringbuilder.append(" ");
                        if (t.kind == END) {break;}
                }
        }
        String string = stringbuilder.toString().replace("BEGIN", "\u005cnBEGIN\u005cn").replace("END;", "\u005cnEND;");
        try {
                this.modelFactory.initOPPLParser(string, constraintSystem.getReasoner());
                return this.modelFactory.getOPPLParser().parse(constraintSystem);
        } catch (Exception e) {
                throw new ParseException("The compiled OPPL script cannot be parsed correctly:\u005cn" + "Compiled pattern: \u005cn" + string + "\u005cnerror message: \u005c"" + e.getMessage() + "\u005c"", e);
        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  String Rendering(ConstraintSystem constraintSystem) throws ParseException {
 /*@bgen(jjtree) Rendering */
     PatternRendering jjtn000 = new PatternRendering(JJTRENDERING);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {String string="";
        Token t;
        while(true){
                t = getToken(1);
                if (t.kind == EOF || t.kind==SEMICOLON){
                        break;
                }else if(t.kind == VARIABLENAME){
                        Variable v = constraintSystem.getVariable(t.image);
                        if(v==null){
                                throw new ParseException("Undefined Variable "+t.image);
                        }else{
                                string+=t.image+" ";
                                t = getNextToken();
                        }
                }else{
                        string += t.image+" ";
                        t = getNextToken();
                }
        }
        return string;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  final public String resolvedString(PatternConstraintSystem constraintSystem, boolean writeUnresolved) throws ParseException {
        Token t=null;String resolvedPattern=null;
        String variableDefinition=null;
        String partial;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLENAME:
      variableDefinition = variableReference(constraintSystem);
                                                               if(writeUnresolved){unresolvedString+=variableDefinition+" ";}{if (true) return variableDefinition;}
      break;
    case DOLLAR:
      resolvedPattern = resolveInnerPattern(constraintSystem);
                                                                 {if (true) return resolvedPattern;}
      break;
    case THISCLASS:
      t = jj_consume_token(THISCLASS);
                if(writeUnresolved){unresolvedString += t.image+" ";}
                 {if (true) return new PatternConstant<OWLClass>(PatternConstraintSystem.THIS_CLASS_VARIABLE_NAME,
                 VariableType.CLASS, constraintSystem.getOntologyManager().getOWLDataFactory()).getName();}
      break;
    case ACTIONTOKENS:
      t = jj_consume_token(ACTIONTOKENS);
                             if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return t.image;}
      break;
    case END:
      t = jj_consume_token(END);
                    if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return t.image;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                           if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return t.image;}
      break;
    case CREATEDIDENTIFIER:
      t = jj_consume_token(CREATEDIDENTIFIER);
                                 unresolvedString+= t.image+" ";{if (true) return t.image;}
      break;
    case OPENCURLYBRACKETS:
      t = jj_consume_token(OPENCURLYBRACKETS);
                                if(writeUnresolved){unresolvedString += t.image;}{if (true) return t.image;}
      break;
    case CLOSEDCURLYBRACKETS:
      t = jj_consume_token(CLOSEDCURLYBRACKETS);
                                  if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return t.image;}
      break;
    case COMMA:
      t = jj_consume_token(COMMA);
                    if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return t.image;}
      break;
    case OPENPARENTHESYS:
      t = jj_consume_token(OPENPARENTHESYS);
                              if(writeUnresolved){unresolvedString += t.image;}{if (true) return t.image;}
      break;
    case CLOSEDPARENTHESYS:
      t = jj_consume_token(CLOSEDPARENTHESYS);
                                if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return t.image;}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                              if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return t.image;}
      break;
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                        if(writeUnresolved){unresolvedString += t.image;}{if (true) return "";}
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      partial = simpleCall();
      jj_consume_token(QUOTE);
                                              if(writeUnresolved){unresolvedString += "\u005c""+partial+"\u005c"";}{if (true) return "\u005c""+partial+"\u005c"";}
      break;
    case DOT:
      t = jj_consume_token(DOT);
                    if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return  t.image;}
      break;
    case PLUS:
      t = jj_consume_token(PLUS);
                     if(writeUnresolved){unresolvedString += t.image+" ";}{if (true) return  t.image;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  String simpleCall() throws ParseException {
                    /*@bgen(jjtree) simpleCall */
PatternsimpleCall jjtn000 = new PatternsimpleCall(JJTSIMPLECALL);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {return PatternUtils.readString(this, true, QUOTE);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public String variableReference(PatternConstraintSystem constraintSystem) throws ParseException {
        Token variableNameToken;
        Token variableType;
        Token directionToken = null;
        Token scopeToken=null;
        String scopeString="";
        Token opplFunctionName=null;
        String opplFunctionArgs="";
        String variableExpression="";
        String opplFunction="";
        //SingleValueGeneratedVariable opplFunctionVariable;
        Token groupnumber;
    if (jj_2_2(4)) {
      variableNameToken = jj_consume_token(VARIABLENAME);
      jj_consume_token(COLON);
      variableType = jj_consume_token(VARIABLETYPE);
      jj_consume_token(OPENSQUAREBRACKETS);
      directionToken = jj_consume_token(IDENTIFIER);
      label_1:
      while (true) {
        scopeToken = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
                scopeString+=" "+scopeToken.image;
      jj_consume_token(CLOSEDSQUAREBRACKETS);
                {if (true) return variableNameToken.image+":"+variableType.image+"["+directionToken.image+" "+scopeString.trim()+"]";}
    } else if (jj_2_3(4)) {
      variableNameToken = jj_consume_token(VARIABLENAME);
      jj_consume_token(COLON);
      variableType = jj_consume_token(VARIABLETYPE);
      jj_consume_token(EQUALS);
      opplFunction = opplFunction(variableNameToken.image, variableType.image, constraintSystem);
                {if (true) return variableNameToken.image+":"+variableType.image+" = "+opplFunction;}
    } else if (jj_2_4(3)) {
      variableNameToken = jj_consume_token(VARIABLENAME);
      jj_consume_token(COLON);
      variableType = jj_consume_token(VARIABLETYPE);
                try{
                        Variable v =constraintSystem.createVariable(variableNameToken.image,VariableType.valueOfIgnoreCase(variableType.image));
                        {if (true) return v.toString();}
                }catch(Exception e){
                        {if (true) throw new ParseException(e.getMessage(), e);}
                }
    } else if (jj_2_5(3)) {
      variableNameToken = jj_consume_token(VARIABLENAME);
      jj_consume_token(DOT);
      jj_consume_token(RENDERINGVARIABLEATTRIBUTE);
        {if (true) return variableNameToken.image+"."+"RENDERING";}
    } else if (jj_2_6(3)) {
      variableNameToken = jj_consume_token(VARIABLENAME);
      jj_consume_token(DOT);
      jj_consume_token(VALUESVARIABLEATTRIBUTE);
        {if (true) return variableNameToken.image+"."+"VALUES";}
    } else if (jj_2_7(3)) {
      variableNameToken = jj_consume_token(VARIABLENAME);
      jj_consume_token(DOT);
      jj_consume_token(GROUPSVARIABLEATTRIBUTE);
      jj_consume_token(OPENPARENTHESYS);
      groupnumber = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(CLOSEDPARENTHESYS);
        {if (true) return variableNameToken.image+"."+"GROUPS("+groupnumber.image+")";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLENAME:
        variableNameToken = jj_consume_token(VARIABLENAME);
                {if (true) return variableNameToken.image;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String opplFunction(String variableNameString, String variableTypeString, PatternConstraintSystem constraintSystem) throws ParseException {
        Token opplFunctionNameToken;
        String variableExpression;
        String opplFunctionArgs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPPLFUNCTION:
      opplFunctionNameToken = jj_consume_token(OPPLFUNCTION);
      jj_consume_token(OPENPARENTHESYS);
      opplFunctionArgs = opplFunctionArgs(constraintSystem);
      jj_consume_token(CLOSEDPARENTHESYS);
                        {if (true) return opplFunctionNameToken.image+"("+opplFunctionArgs+")";}
      break;
    default:
      jj_la1[6] = jj_gen;
      variableExpression = variableExpression(constraintSystem);
                        {if (true) return variableExpression;}
    }
    throw new Error("Missing return statement in function");
  }

  String variableExpression(PatternConstraintSystem cs) throws ParseException {
                                                      /*@bgen(jjtree) variableExpression */
     PatternvariableExpression jjtn000 = new PatternvariableExpression(JJTVARIABLEEXPRESSION);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {String expression = org.coode.patterns.syntax.PatternUtils.readAndResolveString(this, cs, true, COMMA,ACTIONTOKENS);
        return expression;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  String opplFunctionArgs(PatternConstraintSystem constraintSystem) throws ParseException {
                                                                  /*@bgen(jjtree) opplFunctionArgs */
     PatternopplFunctionArgs jjtn000 = new PatternopplFunctionArgs(JJTOPPLFUNCTIONARGS);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {return org.coode.patterns.syntax.PatternUtils.readAndResolveString(this,constraintSystem, true, CLOSEDPARENTHESYS);/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  final public String resolveInnerPattern(PatternConstraintSystem constraintSystem) throws ParseException {
                                                                            Token t;List<List<String>> args; PatternSignature signature = null;
    jj_consume_token(DOLLAR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(OPENPARENTHESYS);
                try{
                        signature = new PatternSignature(t.image, getOWLOntologyManager(), this.modelFactory);
                }catch (PatternException e) {{if (true) throw new ParseException(e.getMessage(), e);}}
    args = argList(signature);
    jj_consume_token(CLOSEDPARENTHESYS);
                String resolvedPattern;
                try {
                        unresolvedString+="$"+t.image+"(";
                        boolean first = true;
                        for(List<String> anArgument: args){
                                if(!first){unresolvedString+=", ";}else{first = false;}
                                if(anArgument.size()==1){
                                        unresolvedString+=anArgument.iterator().next();
                                }else{
                                        boolean firstSubArg= true;
                                        unresolvedString+="{";
                                        for(String subArg: anArgument){
                                                unresolvedString+=firstSubArg?subArg:", "+subArg;
                                                firstSubArg=firstSubArg?false:firstSubArg;
                                        }
                                unresolvedString+="}";
                        }
                }
                unresolvedString+=") ";
                String patternName = t.image;
                //visited.add(patternName);
                resolvedPattern = constraintSystem.resolvePattern(
                                patternName,
                                owlOntologyManager,
                                this.visited,
                                this.dependencies,
                                args.toArray(new List[args.size()]));
        } catch (PatternException e) {{if (true) throw new ParseException(e.getMessage(), e);}}
        {if (true) return resolvedPattern;}
    throw new Error("Missing return statement in function");
  }

  final public List<List<String>> argList(PatternSignature signature) throws ParseException {
                                                              List<List<String>> toReturn = new ArrayList<List<String>>();List<String> anArgument=null; int i=0;
                this.completions.clear();
                try{
                        this.completions.addAll(signature.getPossibleValues(i));
                }catch(Exception e){{if (true) throw new ParseException(e.getMessage(), e);}}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case VARIABLENAME:
    case IDENTIFIER:
    case OPENCURLYBRACKETS:
    case CREATESYMBOL:
      anArgument = arg(i, signature);
                        i++;
                        toReturn.add(anArgument);
                        if(completions.size()==1 &&
                                anArgument.size() ==1 &&
                                completions.iterator().next().toString().equals(anArgument.iterator().next())){
                                this.completions.clear();
                                if(i>= signature.size()){
                                        this.completions.add(")");
                                }else{
                                        this.completions.add(",");
                                }
                        }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
                this.completions.clear();
                try{
                        this.completions.addAll(signature.getPossibleValues(i));
                }catch(Exception e){{if (true) throw new ParseException(e.getMessage(), e);}}
        anArgument = arg(i, signature);
                i++;
                toReturn.add(anArgument);
                if(completions.size()==1
                        && anArgument.size() == 1
                        && completions.iterator().next().toString().equals(anArgument.iterator().next())){
                        this.completions.clear();
                        if(i>= signature.size()){
                                this.completions.add(")");
                        }else{
                                this.completions.add(",");
                        }
                }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
         {if (true) return toReturn;}
    throw new Error("Missing return statement in function");
  }

  final public List<String> arg(int i, PatternSignature signature) throws ParseException {
                                                           String t=null;List<String> toReturn=new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case VARIABLENAME:
    case IDENTIFIER:
    case CREATESYMBOL:
      t = argToken(i,signature);
                try{
                        this.completions.clear();
                        this.completions.addAll(signature.getPossibleValues(i, t));
                }catch(Exception e){{if (true) throw new ParseException(e.getMessage(), e);}}
                toReturn.add(t);
                {if (true) return toReturn;}
      break;
    case OPENCURLYBRACKETS:
      jj_consume_token(OPENCURLYBRACKETS);
      t = argToken(i,signature);
                toReturn.add(t);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        t = argToken(i,signature);
                toReturn.add(t);
      }
      jj_consume_token(CLOSEDCURLYBRACKETS);
                {if (true) return toReturn;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String argToken(int i, PatternSignature signature) throws ParseException {
                                                           Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLENAME:
      t = jj_consume_token(VARIABLENAME);
                {if (true) return t.image;}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                {if (true) return t.image;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                {if (true) return t.image;}
      break;
    case CREATESYMBOL:
      jj_consume_token(CREATESYMBOL);
      t = jj_consume_token(IDENTIFIER);
                String toCreate=t.image;
                try{
                        {if (true) return PatternParserUtils.create(getOWLOntologyManager(), toCreate, i, signature, modelFactory.getOPPLParser().getOPPLFactory());}
                }catch(Exception e){{if (true) throw new ParseException(e.getMessage(), e);}}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  SingleValueGeneratedVariable expressionGeneratedVariable(String name,VariableType type, PatternConstraintSystem constraintSystem) throws ParseException {
                                                                                                                                  /*@bgen(jjtree) expressionGeneratedVariable */
PatternexpressionGeneratedVariable jjtn000 = new PatternexpressionGeneratedVariable(JJTEXPRESSIONGENERATEDVARIABLE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {int beginningSubSection = token.beginColumn;
int beginningSubSectionLine = token.beginLine;
String expression = PatternUtils.readAndResolveString(this, constraintSystem, false, COMMA, ACTIONTOKENS);
try {
        return org.coode.oppl.syntax.Utils.parseVariableExpressionGeneratedVariable(name, type, expression, constraintSystem);
} catch (ParserException e) {
Exception temp=org.coode.oppl.syntax.Utils.buildException(beginningSubSection, beginningSubSectionLine, e);
throw new ParseException(temp.getMessage(), temp);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  Variable regexpOperation(String name,VariableType type, SingleValueGeneratedValue<String> expression, PatternConstraintSystem constraintSystem) throws ParseException {
                                                                                                                                                /*@bgen(jjtree) regexpOperation */
PatternregexpOperation jjtn000 = new PatternregexpOperation(JJTREGEXPOPERATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {int beginningSubSection = token.beginColumn;
int beginningSubSectionLine = token.beginLine;

//try {
//	Pattern.compile(expression);
//} catch (PatternSyntaxException e) {
//Exception temp=org.coode.oppl.syntax.Utils.buildException(expression, beginningSubSection, beginningSubSectionLine, e);
//throw new ParseException(temp.getMessage(), temp);
//}
try {
        return org.coode.oppl.syntax.Utils.parseRegexpGeneratedVariable(name, type, expression, constraintSystem);
} catch (ParserException e) {
Exception temp=org.coode.oppl.syntax.Utils.buildException(beginningSubSection, beginningSubSectionLine, e);
throw new ParseException(temp.getMessage(), temp);
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public AbstractCollectionGeneratedValue<? extends OWLObject> set(VariableType type,PatternConstraintSystem constraintSystem) throws ParseException {
 Token variableNameToken=null;
    variableNameToken = jj_consume_token(VARIABLENAME);
    jj_consume_token(DOT);
    jj_consume_token(VALUESVARIABLEATTRIBUTE);
                        String variableName = variableNameToken.image;
                        Variable v = constraintSystem.getVariable(variableName);
                        if (v != null) {
                                if (type == v.getType()) {
                                        Attribute attribute = Attribute.VALUES;
                                        {if (true) return AttributeFactory.getCollectionGeneratedValue(attribute, v, constraintSystem);}
                                } else {{if (true) throw new ParseException("Type mismatch for variable " + v.getName() + ": type " + type + " needed instead of the actual " + v.getType());}}
                        } else {{if (true) throw new ParseException("Invalid variable name: " + variableName);}}
    throw new Error("Missing return statement in function");
  }

  final public SingleValueGeneratedValue<String> stringOperation(PatternConstraintSystem constraintSystem, boolean spacesAdded) throws ParseException {
 SingleValueGeneratedValue result=null;
    result = stringConcat(constraintSystem, spacesAdded);
                 {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public SingleValueGeneratedValue<String> stringConcat(PatternConstraintSystem constraintSystem, boolean spacesAdded) throws ParseException {
        SingleValueGeneratedValue aGeneratedValue;
        List<SingleValueGeneratedValue<String>> components = new ArrayList<SingleValueGeneratedValue<String>>();
    aGeneratedValue = generatedValue(constraintSystem, spacesAdded);
                 components.add(aGeneratedValue);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(PLUS);
      aGeneratedValue = generatedValue(constraintSystem, spacesAdded);
                 components.add(aGeneratedValue);
    }
                 if(components.size()==1){{if (true) return aGeneratedValue;}}else{{if (true) return new ConcatGeneratedValues(components);}}
    throw new Error("Missing return statement in function");
  }

  final public SingleValueGeneratedValue generatedValue(PatternConstraintSystem constraintSystem, boolean spacesAdded) throws ParseException {
        String valueToken;
        Token variableNameToken;
        Token variableAttributeToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      jj_consume_token(QUOTE);
      valueToken = readString(spacesAdded, constraintSystem);
      jj_consume_token(QUOTE);
                 {if (true) return new StringGeneratedValue(valueToken);}
      break;
    default:
      jj_la1[13] = jj_gen;
      if (jj_2_8(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(DOT);
        variableAttributeToken = jj_consume_token(RENDERINGVARIABLEATTRIBUTE);
                        String attributeString = variableAttributeToken.image;
                        String variableName = variableNameToken.image;
                        Variable v = constraintSystem.getVariable(variableName);
                        if(v !=null){
                                try {
                                        Attribute attribute = Attribute.valueOf(attributeString);
                                        {if (true) return AttributeFactory.getVariableGeneratedValue(attribute, v, constraintSystem);}
                                } catch (IllegalArgumentException e) {{if (true) throw new ParseException("Invalid attribute name: " + e.getMessage() + "; valid names are: " + Arrays.toString(Attribute.values()));}}
                }else{{if (true) throw new ParseException("Invalid variable name: "+variableName);}}
      } else if (jj_2_9(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(DOT);
        jj_consume_token(GROUPSVARIABLEATTRIBUTE);
        jj_consume_token(OPENPARENTHESYS);
        variableAttributeToken = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(CLOSEDPARENTHESYS);
                String attributeString = variableAttributeToken.image;
                String variableName = variableNameToken.image;
                Variable v = constraintSystem.getVariable(variableName);
                if (v != null) {
                        int index = Integer.parseInt(attributeString);
                        RegExpGenerated gv = (RegExpGenerated) v;
                        Set<OWLObject> bindings = gv.getPossibleBindings();
                        if (bindings.size() > 0) {
                                VariableIndexGeneratedValue toReturn=new VariableIndexGeneratedValue(gv, index, bindings);
                                {if (true) return toReturn;}
                        }
                        {if (true) throw new ParseException("No matches found for variable: " + v);}
                }else{{if (true) throw new ParseException("Invalid variable name: "+variableName);}}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  String readString(boolean spacesAdded, PatternConstraintSystem cs) throws ParseException {
                                                                   /*@bgen(jjtree) readString */
PatternreadString jjtn000 = new PatternreadString(JJTREADSTRING);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {return PatternUtils.readAndResolveString(this, cs, spacesAdded, QUOTE);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  OWLObject OWLExpression(Variable v, PatternConstraintSystem constraintSystem) throws ParseException {
 /*@bgen(jjtree) OWLExpression */
             PatternOWLExpression jjtn000 = new PatternOWLExpression(JJTOWLEXPRESSION);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {Token t;
                String manSyntaxString="";
                while(true){
                        t = getToken(1);
                        if (t.kind==COMMA || t.kind ==CLOSEDCURLYBRACKETS || t.kind==SEMICOLON || t.kind==ACTIONTOKENS || t.kind==END || t.kind == EOF){
                                break;
                        }else{
                                manSyntaxString += t.image+" ";
                                t = getNextToken();
                        }
                }
        manSyntaxString = manSyntaxString.trim();
        ExpressionParser expressionParser = new ExpressionParser(manSyntaxString, constraintSystem);
        try{
        OWLObject toReturn = v.accept(expressionParser);
        return toReturn;
        } catch(Exception e){throw new ParseException(e.getMessage(), e);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
  }

  final public VariableType variableType() throws ParseException {
                                   Token t;
    t = jj_consume_token(VARIABLETYPE);
                 {if (true) return VariableType.valueOfIgnoreCase(t.image);}
    throw new Error("Missing return statement in function");
  }

  OWLAxiom Clause(PatternConstraintSystem constraintSystem) throws ParseException {
                                                          /*@bgen(jjtree) Clause */
     PatternClause jjtn000 = new PatternClause(JJTCLAUSE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {int beginningSubSection = -1;
        int beginningSubSectionLine = -1;
        OWLAxiom toReturn =null;
        String manSyntaxString="";
        Token t;
                while(true){
                        t = getToken(1);
                        if (beginningSubSection < 0) {beginningSubSection = t.beginColumn;}
                        if (beginningSubSectionLine < 0) {beginningSubSectionLine = t.beginLine;}
                        if (t.kind==COMMA || t.kind==SEMICOLON || t.kind==ACTIONTOKENS || t.kind==END || t.kind == EOF){
                                break;
                        }else{
                                manSyntaxString += t.image+" ";
                                t = getNextToken();
                        }
                }
        manSyntaxString = manSyntaxString.trim();
        VariableManchesterOWLSyntaxParser parser = new VariableManchesterOWLSyntaxParser(manSyntaxString, constraintSystem
                                        );
        //parser.setOWLEntityChecker(getOPPLFactory().getOWLEntityChecker());
        try{
                toReturn = parser.parseAxiom();

        }catch(ParserException e){
        Exception ex=org.coode.oppl.syntax.Utils.buildException(beginningSubSection, beginningSubSectionLine, e);
        throw new ParseException("OPPLParser.Clause() \u005c"" + manSyntaxString + "\u005c"\u005ct" + ex.getMessage(), ex);
        }
return toReturn;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3_5() {
    if (jj_scan_token(VARIABLENAME)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(RENDERINGVARIABLEATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(VARIABLENAME)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(VARIABLENAME)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLETYPE)) return true;
    if (jj_scan_token(OPENSQUAREBRACKETS)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(RENDERINGVARIABLEATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(VARIABLENAME)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLETYPE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(GROUPSVARIABLEATTRIBUTE)) return true;
    if (jj_scan_token(OPENPARENTHESYS)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(VARIABLENAME)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(GROUPSVARIABLEATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(VARIABLENAME)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLETYPE)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(VARIABLENAME)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(VALUESVARIABLEATTRIBUTE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PatternParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x0,0x1000000,0x66041880,0x2000000,0x40000,0x2000,0x20000000,0x2040080,0x20000000,0x2040080,0x2040080,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1000,0x0,0x18f7,0x0,0x0,0x0,0x0,0x2040,0x0,0x2040,0x2000,0x20,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PatternParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PatternParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PatternParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PatternParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PatternParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PatternParser(PatternParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PatternParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
