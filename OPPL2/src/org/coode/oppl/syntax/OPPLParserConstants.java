/* Generated By:JJTree&JavaCC: Do not edit this line. OPPLParserConstants.java */
package org.coode.oppl.syntax;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface OPPLParserConstants {
	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int INTEGER_LITERAL = 7;
	/** RegularExpression Id. */
	int DECIMAL_LITERAL = 8;
	/** RegularExpression Id. */
	int HEX_LITERAL = 9;
	/** RegularExpression Id. */
	int OCTAL_LITERAL = 10;
	/** RegularExpression Id. */
	int REGEXPMETACHAR = 11;
	/** RegularExpression Id. */
	int IDENTIFIER = 12;
	/** RegularExpression Id. */
	int NAME = 13;
	/** RegularExpression Id. */
	int LETTER = 14;
	/** RegularExpression Id. */
	int DIGIT = 15;
	/** RegularExpression Id. */
	int CREATE = 16;
	/** RegularExpression Id. */
	int CREATEINTERSECTION = 17;
	/** RegularExpression Id. */
	int CREATEUNION = 18;
	/** RegularExpression Id. */
	int MATCH = 19;
	/** RegularExpression Id. */
	int VARIABLETYPE = 20;
	/** RegularExpression Id. */
	int SELECT = 21;
	/** RegularExpression Id. */
	int WHERE = 22;
	/** RegularExpression Id. */
	int ASSERTED = 23;
	/** RegularExpression Id. */
	int ADD = 24;
	/** RegularExpression Id. */
	int REMOVE = 25;
	/** RegularExpression Id. */
	int BEGIN = 26;
	/** RegularExpression Id. */
	int END = 27;
	/** RegularExpression Id. */
	int COMMA = 28;
	/** RegularExpression Id. */
	int SEMICOLON = 29;
	/** RegularExpression Id. */
	int APO = 30;
	/** RegularExpression Id. */
	int COLON = 31;
	/** RegularExpression Id. */
	int OPENPARENTHESYS = 32;
	/** RegularExpression Id. */
	int CLOSEDPARENTHESYS = 33;
	/** RegularExpression Id. */
	int QUOTE = 34;
	/** RegularExpression Id. */
	int POWER = 35;
	/** RegularExpression Id. */
	int OPENCURLYBRACKETS = 36;
	/** RegularExpression Id. */
	int CLOSEDCURLYBRACKETS = 37;
	/** RegularExpression Id. */
	int OPENSQUAREBRACKETS = 38;
	/** RegularExpression Id. */
	int CLOSEDSQUAREBRACKETS = 39;
	/** RegularExpression Id. */
	int NEQ = 40;
	/** RegularExpression Id. */
	int IN = 41;
	/** RegularExpression Id. */
	int GENERATEDENTITY = 42;
	/** RegularExpression Id. */
	int SUBCLASSOF = 43;
	/** RegularExpression Id. */
	int EQUIVALENTTO = 44;
	/** RegularExpression Id. */
	int DISJOINTWITH = 45;
	/** RegularExpression Id. */
	int DISJOINT_UNION_OF = 46;
	/** RegularExpression Id. */
	int FUNCTIONAL = 47;
	/** RegularExpression Id. */
	int INVERSE = 48;
	/** RegularExpression Id. */
	int INVERSE_FUNCTIONAL = 49;
	/** RegularExpression Id. */
	int SUB_PROPERTY_OF = 50;
	/** RegularExpression Id. */
	int SYMMETRIC = 51;
	/** RegularExpression Id. */
	int TRANSITIVE = 52;
	/** RegularExpression Id. */
	int OTHERDIRECTION = 53;
	/** RegularExpression Id. */
	int SUPERCLASSOF = 54;
	/** RegularExpression Id. */
	int SUPER_PROPERTY_OF = 55;
	/** RegularExpression Id. */
	int INSTANCE_OF = 56;
	/** RegularExpression Id. */
	int RENDERINGVARIABLEATTRIBUTE = 57;
	/** RegularExpression Id. */
	int VALUESVARIABLEATTRIBUTE = 58;
	/** RegularExpression Id. */
	int GROUPSVARIABLEATTRIBUTE = 59;
	/** RegularExpression Id. */
	int ENTITYNAMES = 60;
	/** RegularExpression Id. */
	int LITERAL = 61;
	/** Lexical state. */
	int DEFAULT = 0;
	/** Literal token values. */
	String[] tokenImage = { "<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"",
			"<token of kind 5>", "<token of kind 6>", "<INTEGER_LITERAL>",
			"<DECIMAL_LITERAL>", "<HEX_LITERAL>", "<OCTAL_LITERAL>",
			"<REGEXPMETACHAR>", "<IDENTIFIER>", "<NAME>", "<LETTER>",
			"<DIGIT>", "\"create\"", "\"CreateIntersection\"",
			"\"CreateUnion\"", "\"Match\"", "<VARIABLETYPE>", "\"SELECT\"",
			"\"WHERE\"", "\"ASSERTED\"", "\"ADD\"", "\"REMOVE\"", "\"BEGIN\"",
			"\"END\"", "\",\"", "\";\"", "\"\\\'\"", "\":\"", "\"(\"", "\")\"",
			"\"\\\"\"", "\"^\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\"!=\"",
			"\"IN\"", "<GENERATEDENTITY>", "<SUBCLASSOF>", "<EQUIVALENTTO>",
			"<DISJOINTWITH>", "\"DisjointUnionOf\"", "\"Functional\"",
			"\"inv\"", "\"InverseFunctional\"", "<SUB_PROPERTY_OF>",
			"\"Symmetric\"", "\"Transitive\"", "<OTHERDIRECTION>",
			"<SUPERCLASSOF>", "<SUPER_PROPERTY_OF>", "<INSTANCE_OF>",
			"\"RENDERING\"", "\"VALUES\"", "\"GROUPS\"", "<ENTITYNAMES>",
			"<LITERAL>", "\"=\"", "\".\"", "\"+\"", };
}
