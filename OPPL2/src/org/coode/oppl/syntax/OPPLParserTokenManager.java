/* Generated By:JJTree&JavaCC: Do not edit this line. OPPLParserTokenManager.java */
package org.coode.oppl.syntax;

/** Token Manager. */
public class OPPLParserTokenManager implements OPPLParserConstants {
	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
			case 9:
				jjmatchedKind = 2;
				return jjMoveNfa_0(0, 0);
			case 10:
				jjmatchedKind = 3;
				return jjMoveNfa_0(0, 0);
			case 13:
				jjmatchedKind = 4;
				return jjMoveNfa_0(0, 0);
			case 32:
				jjmatchedKind = 1;
				return jjMoveNfa_0(0, 0);
			case 33:
				return jjMoveStringLiteralDfa1_0(0x10000000000L);
			case 34:
				jjmatchedKind = 34;
				return jjMoveNfa_0(0, 0);
			case 39:
				jjmatchedKind = 30;
				return jjMoveNfa_0(0, 0);
			case 40:
				jjmatchedKind = 32;
				return jjMoveNfa_0(0, 0);
			case 41:
				jjmatchedKind = 33;
				return jjMoveNfa_0(0, 0);
			case 43:
				jjmatchedKind = 64;
				return jjMoveNfa_0(0, 0);
			case 44:
				jjmatchedKind = 28;
				return jjMoveNfa_0(0, 0);
			case 46:
				jjmatchedKind = 63;
				return jjMoveNfa_0(0, 0);
			case 58:
				jjmatchedKind = 31;
				return jjMoveNfa_0(0, 0);
			case 59:
				jjmatchedKind = 29;
				return jjMoveNfa_0(0, 0);
			case 61:
				jjmatchedKind = 62;
				return jjMoveNfa_0(0, 0);
			case 65:
				return jjMoveStringLiteralDfa1_0(0x1800000L);
			case 66:
				return jjMoveStringLiteralDfa1_0(0x4000000L);
			case 67:
				return jjMoveStringLiteralDfa1_0(0x70000L);
			case 68:
				return jjMoveStringLiteralDfa1_0(0x400000000000L);
			case 69:
				return jjMoveStringLiteralDfa1_0(0x8000000L);
			case 70:
				return jjMoveStringLiteralDfa1_0(0x800000000000L);
			case 71:
				return jjMoveStringLiteralDfa1_0(0x800000000000000L);
			case 73:
				return jjMoveStringLiteralDfa1_0(0x2020000000000L);
			case 77:
				return jjMoveStringLiteralDfa1_0(0x80000L);
			case 82:
				return jjMoveStringLiteralDfa1_0(0x200000002000000L);
			case 83:
				return jjMoveStringLiteralDfa1_0(0x8000000200000L);
			case 84:
				return jjMoveStringLiteralDfa1_0(0x10000000000000L);
			case 86:
				return jjMoveStringLiteralDfa1_0(0x400000000000000L);
			case 87:
				return jjMoveStringLiteralDfa1_0(0x400000L);
			case 91:
				jjmatchedKind = 38;
				return jjMoveNfa_0(0, 0);
			case 93:
				jjmatchedKind = 39;
				return jjMoveNfa_0(0, 0);
			case 94:
				jjmatchedKind = 35;
				return jjMoveNfa_0(0, 0);
			case 97:
				return jjMoveStringLiteralDfa1_0(0x1800000L);
			case 98:
				return jjMoveStringLiteralDfa1_0(0x4000000L);
			case 99:
				return jjMoveStringLiteralDfa1_0(0x70000L);
			case 101:
				return jjMoveStringLiteralDfa1_0(0x8000000L);
			case 105:
				return jjMoveStringLiteralDfa1_0(0x1020000000000L);
			case 109:
				return jjMoveStringLiteralDfa1_0(0x80000L);
			case 114:
				return jjMoveStringLiteralDfa1_0(0x2000000L);
			case 115:
				return jjMoveStringLiteralDfa1_0(0x200000L);
			case 119:
				return jjMoveStringLiteralDfa1_0(0x400000L);
			case 123:
				jjmatchedKind = 36;
				return jjMoveNfa_0(0, 0);
			case 125:
				jjmatchedKind = 37;
				return jjMoveNfa_0(0, 0);
			default:
				return jjMoveNfa_0(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 0);
		}
		switch (curChar) {
			case 61:
				if ((active0 & 0x10000000000L) != 0L) {
					jjmatchedKind = 40;
					jjmatchedPos = 1;
				}
				break;
			case 65:
				return jjMoveStringLiteralDfa2_0(active0, 0x400000000080000L);
			case 68:
				return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
			case 69:
				return jjMoveStringLiteralDfa2_0(active0, 0x200000006200000L);
			case 72:
				return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
			case 78:
				if ((active0 & 0x20000000000L) != 0L) {
					jjmatchedKind = 41;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
			case 82:
				return jjMoveStringLiteralDfa2_0(active0, 0x800000000070000L);
			case 83:
				return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
			case 97:
				return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
			case 100:
				return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
			case 101:
				return jjMoveStringLiteralDfa2_0(active0, 0x6200000L);
			case 104:
				return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
			case 105:
				return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
			case 110:
				if ((active0 & 0x20000000000L) != 0L) {
					jjmatchedKind = 41;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x3000008000000L);
			case 114:
				return jjMoveStringLiteralDfa2_0(active0, 0x10000000070000L);
			case 115:
				return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
			case 117:
				return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
			case 121:
				return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 1);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 1);
		}
		switch (curChar) {
			case 68:
				if ((active0 & 0x1000000L) != 0L) {
					jjmatchedKind = 24;
					jjmatchedPos = 2;
				} else if ((active0 & 0x8000000L) != 0L) {
					jjmatchedKind = 27;
					jjmatchedPos = 2;
				}
				break;
			case 69:
				return jjMoveStringLiteralDfa3_0(active0, 0x470000L);
			case 71:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
			case 76:
				return jjMoveStringLiteralDfa3_0(active0, 0x400000000200000L);
			case 77:
				return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
			case 78:
				return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
			case 79:
				return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L);
			case 83:
				return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
			case 84:
				return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
			case 97:
				return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
			case 100:
				if ((active0 & 0x1000000L) != 0L) {
					jjmatchedKind = 24;
					jjmatchedPos = 2;
				} else if ((active0 & 0x8000000L) != 0L) {
					jjmatchedKind = 27;
					jjmatchedPos = 2;
				}
				break;
			case 101:
				return jjMoveStringLiteralDfa3_0(active0, 0x470000L);
			case 103:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
			case 109:
				return jjMoveStringLiteralDfa3_0(active0, 0x8000002000000L);
			case 110:
				return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
			case 115:
				return jjMoveStringLiteralDfa3_0(active0, 0x400000800000L);
			case 116:
				return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
			case 118:
				if ((active0 & 0x1000000000000L) != 0L) {
					jjmatchedKind = 48;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 2);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 2);
		}
		switch (curChar) {
			case 65:
				return jjMoveStringLiteralDfa4_0(active0, 0x70000L);
			case 67:
				return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
			case 68:
				return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
			case 69:
				return jjMoveStringLiteralDfa4_0(active0, 0xa00000L);
			case 73:
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
			case 79:
				return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
			case 82:
				return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
			case 85:
				return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000000L);
			case 97:
				return jjMoveStringLiteralDfa4_0(active0, 0x70000L);
			case 99:
				return jjMoveStringLiteralDfa4_0(active0, 0x800000080000L);
			case 101:
				return jjMoveStringLiteralDfa4_0(active0, 0x2000000a00000L);
			case 105:
				return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
			case 106:
				return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
			case 109:
				return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L);
			case 110:
				return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L);
			case 111:
				return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
			case 114:
				return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 3);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 3);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 3);
		}
		switch (curChar) {
			case 67:
				return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
			case 69:
				if ((active0 & 0x400000L) != 0L) {
					jjmatchedKind = 22;
					jjmatchedPos = 4;
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x600000000000000L);
			case 72:
				if ((active0 & 0x80000L) != 0L) {
					jjmatchedKind = 19;
					jjmatchedPos = 4;
				}
				break;
			case 78:
				if ((active0 & 0x4000000L) != 0L) {
					jjmatchedKind = 26;
					jjmatchedPos = 4;
				}
				break;
			case 80:
				return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L);
			case 82:
				return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
			case 84:
				return jjMoveStringLiteralDfa5_0(active0, 0x70000L);
			case 86:
				return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
			case 99:
				return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
			case 101:
				if ((active0 & 0x400000L) != 0L) {
					jjmatchedKind = 22;
					jjmatchedPos = 4;
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
			case 104:
				if ((active0 & 0x80000L) != 0L) {
					jjmatchedKind = 19;
					jjmatchedPos = 4;
				}
				break;
			case 110:
				if ((active0 & 0x4000000L) != 0L) {
					jjmatchedKind = 26;
					jjmatchedPos = 4;
				}
				break;
			case 111:
				return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
			case 114:
				return jjMoveStringLiteralDfa5_0(active0, 0x2000000800000L);
			case 115:
				return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
			case 116:
				return jjMoveStringLiteralDfa5_0(active0, 0x800000070000L);
			case 118:
				return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 4);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 4);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 4);
		}
		switch (curChar) {
			case 69:
				if ((active0 & 0x10000L) != 0L) {
					jjmatchedKind = 16;
					jjmatchedPos = 5;
				} else if ((active0 & 0x2000000L) != 0L) {
					jjmatchedKind = 25;
					jjmatchedPos = 5;
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x60000L);
			case 82:
				return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
			case 83:
				if ((active0 & 0x400000000000000L) != 0L) {
					jjmatchedKind = 58;
					jjmatchedPos = 5;
				} else if ((active0 & 0x800000000000000L) != 0L) {
					jjmatchedKind = 59;
					jjmatchedPos = 5;
				}
				break;
			case 84:
				if ((active0 & 0x200000L) != 0L) {
					jjmatchedKind = 21;
					jjmatchedPos = 5;
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
			case 101:
				if ((active0 & 0x10000L) != 0L) {
					jjmatchedKind = 16;
					jjmatchedPos = 5;
				} else if ((active0 & 0x2000000L) != 0L) {
					jjmatchedKind = 25;
					jjmatchedPos = 5;
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x60000L);
			case 105:
				return jjMoveStringLiteralDfa6_0(active0, 0x10c00000000000L);
			case 115:
				return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
			case 116:
				if ((active0 & 0x200000L) != 0L) {
					jjmatchedKind = 21;
					jjmatchedPos = 5;
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x8000000800000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 5);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 5);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 5);
		}
		switch (curChar) {
			case 69:
				return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
			case 73:
				return jjMoveStringLiteralDfa7_0(active0, 0x200000000020000L);
			case 85:
				return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
			case 101:
				return jjMoveStringLiteralDfa7_0(active0, 0x2000000800000L);
			case 105:
				return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
			case 110:
				return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
			case 111:
				return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
			case 114:
				return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
			case 116:
				return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
			case 117:
				return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 6);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 6);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 6);
		}
		switch (curChar) {
			case 68:
				if ((active0 & 0x800000L) != 0L) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				break;
			case 70:
				return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
			case 78:
				return jjMoveStringLiteralDfa8_0(active0, 0x200000000060000L);
			case 100:
				if ((active0 & 0x800000L) != 0L) {
					jjmatchedKind = 23;
					jjmatchedPos = 7;
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa8_0(active0, 0x18000000000000L);
			case 110:
				return jjMoveStringLiteralDfa8_0(active0, 0x800000060000L);
			case 116:
				return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 7);
	}

	private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 7);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 7);
		}
		switch (curChar) {
			case 71:
				if ((active0 & 0x200000000000000L) != 0L) {
					jjmatchedKind = 57;
					jjmatchedPos = 8;
				}
				break;
			case 73:
				return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
			case 84:
				return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
			case 85:
				return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
			case 97:
				return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
			case 99:
				if ((active0 & 0x8000000000000L) != 0L) {
					jjmatchedKind = 51;
					jjmatchedPos = 8;
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
			case 116:
				return jjMoveStringLiteralDfa9_0(active0, 0x20000L);
			case 117:
				return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
			case 118:
				return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 8);
	}

	private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 8);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 8);
		}
		switch (curChar) {
			case 69:
				return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
			case 79:
				return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
			case 101:
				if ((active0 & 0x10000000000000L) != 0L) {
					jjmatchedKind = 52;
					jjmatchedPos = 9;
				}
				return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
			case 108:
				if ((active0 & 0x800000000000L) != 0L) {
					jjmatchedKind = 47;
					jjmatchedPos = 9;
				}
				break;
			case 110:
				return jjMoveStringLiteralDfa10_0(active0, 0x2400000000000L);
			case 111:
				return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 9);
	}

	private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 9);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 9);
		}
		switch (curChar) {
			case 78:
				if ((active0 & 0x40000L) != 0L) {
					jjmatchedKind = 18;
					jjmatchedPos = 10;
				}
				break;
			case 82:
				return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
			case 99:
				return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
			case 105:
				return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L);
			case 110:
				if ((active0 & 0x40000L) != 0L) {
					jjmatchedKind = 18;
					jjmatchedPos = 10;
				}
				break;
			case 114:
				return jjMoveStringLiteralDfa11_0(active0, 0x20000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 10);
	}

	private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 10);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 10);
		}
		switch (curChar) {
			case 83:
				return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
			case 111:
				return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L);
			case 115:
				return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
			case 116:
				return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 11);
	}

	private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 11);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 11);
		}
		switch (curChar) {
			case 69:
				return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
			case 101:
				return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
			case 105:
				return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L);
			case 110:
				return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 12);
	}

	private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 12);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 12);
		}
		switch (curChar) {
			case 67:
				return jjMoveStringLiteralDfa14_0(active0, 0x20000L);
			case 79:
				return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L);
			case 99:
				return jjMoveStringLiteralDfa14_0(active0, 0x20000L);
			case 111:
				return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 13);
	}

	private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 13);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 13);
		}
		switch (curChar) {
			case 84:
				return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
			case 102:
				if ((active0 & 0x400000000000L) != 0L) {
					jjmatchedKind = 46;
					jjmatchedPos = 14;
				}
				break;
			case 110:
				return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L);
			case 116:
				return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 14);
	}

	private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 14);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 14);
		}
		switch (curChar) {
			case 73:
				return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
			case 97:
				return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L);
			case 105:
				return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 15);
	}

	private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 15);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 15);
		}
		switch (curChar) {
			case 79:
				return jjMoveStringLiteralDfa17_0(active0, 0x20000L);
			case 108:
				if ((active0 & 0x2000000000000L) != 0L) {
					jjmatchedKind = 49;
					jjmatchedPos = 16;
				}
				break;
			case 111:
				return jjMoveStringLiteralDfa17_0(active0, 0x20000L);
			default:
				break;
		}
		return jjMoveNfa_0(0, 16);
	}

	private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjMoveNfa_0(0, 16);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 16);
		}
		switch (curChar) {
			case 78:
				if ((active0 & 0x20000L) != 0L) {
					jjmatchedKind = 17;
					jjmatchedPos = 17;
				}
				break;
			case 110:
				if ((active0 & 0x20000L) != 0L) {
					jjmatchedKind = 17;
					jjmatchedPos = 17;
				}
				break;
			default:
				break;
		}
		return jjMoveNfa_0(0, 17);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0x0L, 0x3ffffff00000000L };
	static final long[] jjbitVec1 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };

	private int jjMoveNfa_0(int startState, int curPos) {
		int strKind = jjmatchedKind;
		int strPos = jjmatchedPos;
		int seenUpto;
		input_stream.backup(seenUpto = curPos + 1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			throw new Error("Internal Error");
		}
		curPos = 0;
		int startsAt = 0;
		jjnewStateCnt = 237;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
						case 0:
							if ((0x3fe000000000000L & l) != 0L) {
								if (kind > 7)
									kind = 7;
								jjCheckNAddTwoStates(1, 2);
							} else if ((0x8000241000000000L & l) != 0L) {
								if (kind > 11)
									kind = 11;
							} else if (curChar == 47)
								jjAddStates(0, 1);
							else if (curChar == 48) {
								if (kind > 7)
									kind = 7;
								jjCheckNAddStates(2, 4);
							} else if (curChar == 34)
								jjstateSet[jjnewStateCnt++] = 72;
							else if (curChar == 39) {
								if (kind > 60)
									kind = 60;
								jjCheckNAdd(70);
							} else if (curChar == 33)
								jjstateSet[jjnewStateCnt++] = 22;
							if (curChar == 63)
								jjstateSet[jjnewStateCnt++] = 5;
							break;
						case 1:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 7)
								kind = 7;
							jjCheckNAddTwoStates(1, 2);
							break;
						case 3:
							if ((0x8000241000000000L & l) != 0L && kind > 11)
								kind = 11;
							break;
						case 4:
							if (curChar == 63)
								jjstateSet[jjnewStateCnt++] = 5;
							break;
						case 5:
							if (curChar != 39)
								break;
							if (kind > 12)
								kind = 12;
							jjCheckNAdd(6);
							break;
						case 6:
							if ((0x3ff008000000000L & l) == 0L)
								break;
							if (kind > 12)
								kind = 12;
							jjCheckNAdd(6);
							break;
						case 21:
							if (curChar == 33)
								jjstateSet[jjnewStateCnt++] = 22;
							break;
						case 22:
							if (curChar != 39)
								break;
							if (kind > 42)
								kind = 42;
							jjCheckNAdd(23);
							break;
						case 23:
							if ((0x3ff008000000000L & l) == 0L)
								break;
							if (kind > 42)
								kind = 42;
							jjCheckNAdd(23);
							break;
						case 69:
							if (curChar != 39)
								break;
							if (kind > 60)
								kind = 60;
							jjCheckNAdd(70);
							break;
						case 70:
							if ((0x3ff008000000000L & l) == 0L)
								break;
							if (kind > 60)
								kind = 60;
							jjCheckNAdd(70);
							break;
						case 71:
							if (curChar == 34)
								jjstateSet[jjnewStateCnt++] = 72;
							break;
						case 72:
							if (curChar == 39)
								jjCheckNAddTwoStates(73, 74);
							break;
						case 73:
							if ((0x3ff008000000000L & l) != 0L)
								jjCheckNAddTwoStates(73, 74);
							break;
						case 74:
							if (curChar == 34)
								jjstateSet[jjnewStateCnt++] = 75;
							break;
						case 77:
							if (curChar != 39)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAddTwoStates(78, 79);
							break;
						case 78:
							if ((0x3ff008000000000L & l) == 0L)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAddTwoStates(78, 79);
							break;
						case 79:
							if (curChar == 58)
								jjstateSet[jjnewStateCnt++] = 80;
							break;
						case 80:
							if (curChar != 39)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAdd(81);
							break;
						case 81:
							if ((0x3ff008000000000L & l) == 0L)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAdd(81);
							break;
						case 94:
							if (curChar != 48)
								break;
							if (kind > 7)
								kind = 7;
							jjCheckNAddStates(2, 4);
							break;
						case 96:
							if ((0x3ff000000000000L & l) == 0L)
								break;
							if (kind > 7)
								kind = 7;
							jjCheckNAddTwoStates(96, 2);
							break;
						case 97:
							if ((0xff000000000000L & l) == 0L)
								break;
							if (kind > 7)
								kind = 7;
							jjCheckNAddTwoStates(97, 2);
							break;
						case 98:
							if (curChar == 47)
								jjAddStates(0, 1);
							break;
						case 99:
							if (curChar == 47)
								jjCheckNAddStates(5, 7);
							break;
						case 100:
							if ((0xffffffffffffdbffL & l) != 0L)
								jjCheckNAddStates(5, 7);
							break;
						case 101:
							if ((0x2400L & l) != 0L && kind > 5)
								kind = 5;
							break;
						case 102:
							if (curChar == 10 && kind > 5)
								kind = 5;
							break;
						case 103:
							if (curChar == 13)
								jjstateSet[jjnewStateCnt++] = 102;
							break;
						case 104:
							if (curChar == 42)
								jjCheckNAddTwoStates(105, 106);
							break;
						case 105:
							if ((0xfffffbffffffffffL & l) != 0L)
								jjCheckNAddTwoStates(105, 106);
							break;
						case 106:
							if (curChar == 42)
								jjAddStates(8, 9);
							break;
						case 107:
							if ((0xffff7fffffffffffL & l) != 0L)
								jjCheckNAddTwoStates(108, 106);
							break;
						case 108:
							if ((0xfffffbffffffffffL & l) != 0L)
								jjCheckNAddTwoStates(108, 106);
							break;
						case 109:
							if (curChar == 47 && kind > 6)
								kind = 6;
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						case 0:
							if ((0x7fffffe87fffffeL & l) != 0L) {
								if (kind > 60)
									kind = 60;
								jjCheckNAdd(70);
							} else if ((0x1000000010000000L & l) != 0L) {
								if (kind > 11)
									kind = 11;
							}
							if (curChar == 115)
								jjAddStates(10, 13);
							else if (curChar == 83)
								jjAddStates(14, 17);
							else if (curChar == 73)
								jjAddStates(18, 19);
							else if (curChar == 68)
								jjAddStates(20, 21);
							else if (curChar == 67)
								jjAddStates(22, 23);
							else if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 67;
							else if (curChar == 100)
								jjstateSet[jjnewStateCnt++] = 57;
							else if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 45;
							else if (curChar == 69)
								jjstateSet[jjnewStateCnt++] = 34;
							else if (curChar == 79)
								jjstateSet[jjnewStateCnt++] = 19;
							break;
						case 2:
							if ((0x100000001000L & l) != 0L && kind > 7)
								kind = 7;
							break;
						case 3:
							if ((0x1000000010000000L & l) != 0L && kind > 11)
								kind = 11;
							break;
						case 5:
						case 6:
							if ((0x7fffffe87fffffeL & l) == 0L)
								break;
							if (kind > 12)
								kind = 12;
							jjCheckNAdd(6);
							break;
						case 7:
							if (curChar == 89 && kind > 20)
								kind = 20;
							break;
						case 8:
						case 111:
							if (curChar == 84)
								jjCheckNAdd(7);
							break;
						case 9:
							if (curChar == 82)
								jjstateSet[jjnewStateCnt++] = 8;
							break;
						case 10:
							if (curChar == 69)
								jjstateSet[jjnewStateCnt++] = 9;
							break;
						case 11:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 10;
							break;
						case 12:
							if (curChar == 79)
								jjstateSet[jjnewStateCnt++] = 11;
							break;
						case 13:
							if (curChar == 82)
								jjstateSet[jjnewStateCnt++] = 12;
							break;
						case 14:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 13;
							break;
						case 15:
							if (curChar == 84)
								jjstateSet[jjnewStateCnt++] = 14;
							break;
						case 16:
							if (curChar == 67)
								jjstateSet[jjnewStateCnt++] = 15;
							break;
						case 17:
							if (curChar == 69)
								jjstateSet[jjnewStateCnt++] = 16;
							break;
						case 18:
							if (curChar == 74)
								jjstateSet[jjnewStateCnt++] = 17;
							break;
						case 19:
							if (curChar == 66)
								jjstateSet[jjnewStateCnt++] = 18;
							break;
						case 20:
							if (curChar == 79)
								jjstateSet[jjnewStateCnt++] = 19;
							break;
						case 22:
						case 23:
							if ((0x7fffffe87fffffeL & l) == 0L)
								break;
							if (kind > 42)
								kind = 42;
							jjCheckNAdd(23);
							break;
						case 24:
							if (curChar == 111 && kind > 44)
								kind = 44;
							break;
						case 25:
						case 36:
							if (curChar == 84)
								jjCheckNAdd(24);
							break;
						case 26:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 25;
							break;
						case 27:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 26;
							break;
						case 28:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 27;
							break;
						case 29:
							if (curChar == 108)
								jjstateSet[jjnewStateCnt++] = 28;
							break;
						case 30:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 29;
							break;
						case 31:
							if (curChar == 118)
								jjstateSet[jjnewStateCnt++] = 30;
							break;
						case 32:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 31;
							break;
						case 33:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 32;
							break;
						case 34:
							if (curChar == 113)
								jjstateSet[jjnewStateCnt++] = 33;
							break;
						case 35:
							if (curChar == 69)
								jjstateSet[jjnewStateCnt++] = 34;
							break;
						case 37:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 36;
							break;
						case 38:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 37;
							break;
						case 39:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 38;
							break;
						case 40:
							if (curChar == 108)
								jjstateSet[jjnewStateCnt++] = 39;
							break;
						case 41:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 40;
							break;
						case 42:
							if (curChar == 118)
								jjstateSet[jjnewStateCnt++] = 41;
							break;
						case 43:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 42;
							break;
						case 44:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 43;
							break;
						case 45:
							if (curChar == 113)
								jjstateSet[jjnewStateCnt++] = 44;
							break;
						case 46:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 45;
							break;
						case 47:
							if (curChar == 104 && kind > 45)
								kind = 45;
							break;
						case 48:
						case 121:
							if (curChar == 116)
								jjCheckNAdd(47);
							break;
						case 49:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 48;
							break;
						case 50:
							if (curChar == 87)
								jjstateSet[jjnewStateCnt++] = 49;
							break;
						case 51:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 50;
							break;
						case 52:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 51;
							break;
						case 53:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 52;
							break;
						case 54:
							if (curChar == 111)
								jjstateSet[jjnewStateCnt++] = 53;
							break;
						case 55:
							if (curChar == 106)
								jjstateSet[jjnewStateCnt++] = 54;
							break;
						case 56:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 55;
							break;
						case 57:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 56;
							break;
						case 58:
							if (curChar == 100)
								jjstateSet[jjnewStateCnt++] = 57;
							break;
						case 59:
							if (curChar == 102 && kind > 53)
								kind = 53;
							break;
						case 60:
						case 141:
						case 171:
						case 181:
						case 214:
						case 224:
							if (curChar == 79)
								jjCheckNAdd(59);
							break;
						case 61:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 60;
							break;
						case 62:
							if (curChar == 99)
								jjstateSet[jjnewStateCnt++] = 61;
							break;
						case 63:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 62;
							break;
						case 64:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 63;
							break;
						case 65:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 64;
							break;
						case 66:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 65;
							break;
						case 67:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 66;
							break;
						case 68:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 67;
							break;
						case 69:
						case 70:
							if ((0x7fffffe87fffffeL & l) == 0L)
								break;
							if (kind > 60)
								kind = 60;
							jjCheckNAdd(70);
							break;
						case 72:
						case 73:
							if ((0x7fffffe87fffffeL & l) != 0L)
								jjCheckNAddTwoStates(73, 74);
							break;
						case 75:
							if (curChar == 94)
								jjstateSet[jjnewStateCnt++] = 76;
							break;
						case 76:
							if (curChar == 94)
								jjstateSet[jjnewStateCnt++] = 77;
							break;
						case 77:
						case 78:
							if ((0x7fffffe87fffffeL & l) == 0L)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAddTwoStates(78, 79);
							break;
						case 80:
						case 81:
							if ((0x7fffffe87fffffeL & l) == 0L)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAdd(81);
							break;
						case 82:
							if (curChar == 67)
								jjAddStates(22, 23);
							break;
						case 83:
							if (curChar == 83 && kind > 20)
								kind = 20;
							break;
						case 84:
							if (curChar == 83)
								jjstateSet[jjnewStateCnt++] = 83;
							break;
						case 85:
							if (curChar == 65)
								jjstateSet[jjnewStateCnt++] = 84;
							break;
						case 86:
							if (curChar == 76)
								jjstateSet[jjnewStateCnt++] = 85;
							break;
						case 87:
							if (curChar == 84 && kind > 20)
								kind = 20;
							break;
						case 88:
							if (curChar == 78)
								jjstateSet[jjnewStateCnt++] = 87;
							break;
						case 89:
							if (curChar == 65)
								jjstateSet[jjnewStateCnt++] = 88;
							break;
						case 90:
							if (curChar == 84)
								jjstateSet[jjnewStateCnt++] = 89;
							break;
						case 91:
							if (curChar == 83)
								jjstateSet[jjnewStateCnt++] = 90;
							break;
						case 92:
							if (curChar == 78)
								jjstateSet[jjnewStateCnt++] = 91;
							break;
						case 93:
							if (curChar == 79)
								jjstateSet[jjnewStateCnt++] = 92;
							break;
						case 95:
							if ((0x100000001000000L & l) != 0L)
								jjCheckNAdd(96);
							break;
						case 96:
							if ((0x7e0000007eL & l) == 0L)
								break;
							if (kind > 7)
								kind = 7;
							jjCheckNAddTwoStates(96, 2);
							break;
						case 100:
							jjAddStates(5, 7);
							break;
						case 105:
							jjCheckNAddTwoStates(105, 106);
							break;
						case 107:
						case 108:
							jjCheckNAddTwoStates(108, 106);
							break;
						case 110:
							if (curChar == 68)
								jjAddStates(20, 21);
							break;
						case 112:
							if (curChar == 82)
								jjstateSet[jjnewStateCnt++] = 111;
							break;
						case 113:
							if (curChar == 69)
								jjstateSet[jjnewStateCnt++] = 112;
							break;
						case 114:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 113;
							break;
						case 115:
							if (curChar == 79)
								jjstateSet[jjnewStateCnt++] = 114;
							break;
						case 116:
							if (curChar == 82)
								jjstateSet[jjnewStateCnt++] = 115;
							break;
						case 117:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 116;
							break;
						case 118:
							if (curChar == 65)
								jjstateSet[jjnewStateCnt++] = 117;
							break;
						case 119:
							if (curChar == 84)
								jjstateSet[jjnewStateCnt++] = 118;
							break;
						case 120:
							if (curChar == 65)
								jjstateSet[jjnewStateCnt++] = 119;
							break;
						case 122:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 121;
							break;
						case 123:
							if (curChar == 87)
								jjstateSet[jjnewStateCnt++] = 122;
							break;
						case 124:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 123;
							break;
						case 125:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 124;
							break;
						case 126:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 125;
							break;
						case 127:
							if (curChar == 111)
								jjstateSet[jjnewStateCnt++] = 126;
							break;
						case 128:
							if (curChar == 106)
								jjstateSet[jjnewStateCnt++] = 127;
							break;
						case 129:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 128;
							break;
						case 130:
							if (curChar == 105)
								jjstateSet[jjnewStateCnt++] = 129;
							break;
						case 131:
							if (curChar == 73)
								jjAddStates(18, 19);
							break;
						case 132:
							if (curChar == 76 && kind > 20)
								kind = 20;
							break;
						case 133:
							if (curChar == 65)
								jjstateSet[jjnewStateCnt++] = 132;
							break;
						case 134:
							if (curChar == 85)
								jjstateSet[jjnewStateCnt++] = 133;
							break;
						case 135:
							if (curChar == 68)
								jjstateSet[jjnewStateCnt++] = 134;
							break;
						case 136:
							if (curChar == 73)
								jjstateSet[jjnewStateCnt++] = 135;
							break;
						case 137:
							if (curChar == 86)
								jjstateSet[jjnewStateCnt++] = 136;
							break;
						case 138:
							if (curChar == 73)
								jjstateSet[jjnewStateCnt++] = 137;
							break;
						case 139:
							if (curChar == 68)
								jjstateSet[jjnewStateCnt++] = 138;
							break;
						case 140:
							if (curChar == 78)
								jjstateSet[jjnewStateCnt++] = 139;
							break;
						case 142:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 141;
							break;
						case 143:
							if (curChar == 99)
								jjstateSet[jjnewStateCnt++] = 142;
							break;
						case 144:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 143;
							break;
						case 145:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 144;
							break;
						case 146:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 145;
							break;
						case 147:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 146;
							break;
						case 148:
							if (curChar == 110)
								jjstateSet[jjnewStateCnt++] = 147;
							break;
						case 149:
							if (curChar == 83)
								jjAddStates(14, 17);
							break;
						case 150:
							if (curChar == 102 && kind > 43)
								kind = 43;
							break;
						case 151:
						case 195:
							if (curChar == 79)
								jjCheckNAdd(150);
							break;
						case 152:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 151;
							break;
						case 153:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 152;
							break;
						case 154:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 153;
							break;
						case 155:
							if (curChar == 108)
								jjstateSet[jjnewStateCnt++] = 154;
							break;
						case 156:
							if (curChar == 67)
								jjstateSet[jjnewStateCnt++] = 155;
							break;
						case 157:
							if (curChar == 98)
								jjstateSet[jjnewStateCnt++] = 156;
							break;
						case 158:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 157;
							break;
						case 159:
							if (curChar == 102 && kind > 50)
								kind = 50;
							break;
						case 160:
						case 203:
							if (curChar == 79)
								jjCheckNAdd(159);
							break;
						case 161:
							if (curChar == 121)
								jjstateSet[jjnewStateCnt++] = 160;
							break;
						case 162:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 161;
							break;
						case 163:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 162;
							break;
						case 164:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 163;
							break;
						case 165:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 164;
							break;
						case 166:
							if (curChar == 111)
								jjstateSet[jjnewStateCnt++] = 165;
							break;
						case 167:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 166;
							break;
						case 168:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 167;
							break;
						case 169:
							if (curChar == 98)
								jjstateSet[jjnewStateCnt++] = 168;
							break;
						case 170:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 169;
							break;
						case 172:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 171;
							break;
						case 173:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 172;
							break;
						case 174:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 173;
							break;
						case 175:
							if (curChar == 108)
								jjstateSet[jjnewStateCnt++] = 174;
							break;
						case 176:
							if (curChar == 67)
								jjstateSet[jjnewStateCnt++] = 175;
							break;
						case 177:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 176;
							break;
						case 178:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 177;
							break;
						case 179:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 178;
							break;
						case 180:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 179;
							break;
						case 182:
							if (curChar == 121)
								jjstateSet[jjnewStateCnt++] = 181;
							break;
						case 183:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 182;
							break;
						case 184:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 183;
							break;
						case 185:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 184;
							break;
						case 186:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 185;
							break;
						case 187:
							if (curChar == 111)
								jjstateSet[jjnewStateCnt++] = 186;
							break;
						case 188:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 187;
							break;
						case 189:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 188;
							break;
						case 190:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 189;
							break;
						case 191:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 190;
							break;
						case 192:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 191;
							break;
						case 193:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 192;
							break;
						case 194:
							if (curChar == 115)
								jjAddStates(10, 13);
							break;
						case 196:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 195;
							break;
						case 197:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 196;
							break;
						case 198:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 197;
							break;
						case 199:
							if (curChar == 108)
								jjstateSet[jjnewStateCnt++] = 198;
							break;
						case 200:
							if (curChar == 67)
								jjstateSet[jjnewStateCnt++] = 199;
							break;
						case 201:
							if (curChar == 98)
								jjstateSet[jjnewStateCnt++] = 200;
							break;
						case 202:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 201;
							break;
						case 204:
							if (curChar == 121)
								jjstateSet[jjnewStateCnt++] = 203;
							break;
						case 205:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 204;
							break;
						case 206:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 205;
							break;
						case 207:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 206;
							break;
						case 208:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 207;
							break;
						case 209:
							if (curChar == 111)
								jjstateSet[jjnewStateCnt++] = 208;
							break;
						case 210:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 209;
							break;
						case 211:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 210;
							break;
						case 212:
							if (curChar == 98)
								jjstateSet[jjnewStateCnt++] = 211;
							break;
						case 213:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 212;
							break;
						case 215:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 214;
							break;
						case 216:
							if (curChar == 115)
								jjstateSet[jjnewStateCnt++] = 215;
							break;
						case 217:
							if (curChar == 97)
								jjstateSet[jjnewStateCnt++] = 216;
							break;
						case 218:
							if (curChar == 108)
								jjstateSet[jjnewStateCnt++] = 217;
							break;
						case 219:
							if (curChar == 67)
								jjstateSet[jjnewStateCnt++] = 218;
							break;
						case 220:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 219;
							break;
						case 221:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 220;
							break;
						case 222:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 221;
							break;
						case 223:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 222;
							break;
						case 225:
							if (curChar == 121)
								jjstateSet[jjnewStateCnt++] = 224;
							break;
						case 226:
							if (curChar == 116)
								jjstateSet[jjnewStateCnt++] = 225;
							break;
						case 227:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 226;
							break;
						case 228:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 227;
							break;
						case 229:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 228;
							break;
						case 230:
							if (curChar == 111)
								jjstateSet[jjnewStateCnt++] = 229;
							break;
						case 231:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 230;
							break;
						case 232:
							if (curChar == 80)
								jjstateSet[jjnewStateCnt++] = 231;
							break;
						case 233:
							if (curChar == 114)
								jjstateSet[jjnewStateCnt++] = 232;
							break;
						case 234:
							if (curChar == 101)
								jjstateSet[jjnewStateCnt++] = 233;
							break;
						case 235:
							if (curChar == 112)
								jjstateSet[jjnewStateCnt++] = 234;
							break;
						case 236:
							if (curChar == 117)
								jjstateSet[jjnewStateCnt++] = 235;
							break;
						default:
							break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
						case 0:
						case 70:
							if ((jjbitVec0[i2] & l2) == 0L)
								break;
							if (kind > 60)
								kind = 60;
							jjCheckNAdd(70);
							break;
						case 5:
						case 6:
							if ((jjbitVec0[i2] & l2) == 0L)
								break;
							if (kind > 12)
								kind = 12;
							jjCheckNAdd(6);
							break;
						case 22:
						case 23:
							if ((jjbitVec0[i2] & l2) == 0L)
								break;
							if (kind > 42)
								kind = 42;
							jjCheckNAdd(23);
							break;
						case 72:
						case 73:
							if ((jjbitVec0[i2] & l2) != 0L)
								jjCheckNAddTwoStates(73, 74);
							break;
						case 77:
						case 78:
							if ((jjbitVec0[i2] & l2) == 0L)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAddTwoStates(78, 79);
							break;
						case 80:
						case 81:
							if ((jjbitVec0[i2] & l2) == 0L)
								break;
							if (kind > 61)
								kind = 61;
							jjCheckNAdd(81);
							break;
						case 100:
							if ((jjbitVec1[i2] & l2) != 0L)
								jjAddStates(5, 7);
							break;
						case 105:
							if ((jjbitVec1[i2] & l2) != 0L)
								jjCheckNAddTwoStates(105, 106);
							break;
						case 107:
						case 108:
							if ((jjbitVec1[i2] & l2) != 0L)
								jjCheckNAddTwoStates(108, 106);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 237 - (jjnewStateCnt = startsAt)))
				break;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				break;
			}
		}
		if (jjmatchedPos > strPos)
			return curPos;
		int toRet = Math.max(curPos, seenUpto);
		if (curPos < toRet)
			for (i = toRet - Math.min(curPos, seenUpto); i-- > 0;)
				try {
					curChar = input_stream.readChar();
				} catch (java.io.IOException e) {
					throw new Error(
							"Internal Error : Please send a bug report.");
				}
		if (jjmatchedPos < strPos) {
			jjmatchedKind = strKind;
			jjmatchedPos = strPos;
		} else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
			jjmatchedKind = strKind;
		return toRet;
	}

	static final int[] jjnextStates = { 99, 104, 95, 97, 2, 100, 101, 103, 107,
			109, 202, 213, 223, 236, 158, 170, 180, 193, 140, 148, 120, 130,
			86, 93, };
	/** Token literal values. */
	public static final String[] jjstrLiteralImages = {
			"",
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			"\54",
			"\73",
			"\47",
			"\72",
			"\50",
			"\51",
			"\42",
			"\136",
			"\173",
			"\175",
			"\133",
			"\135",
			"\41\75",
			null,
			null,
			null,
			null,
			null,
			"\104\151\163\152\157\151\156\164\125\156\151\157\156\117\146",
			"\106\165\156\143\164\151\157\156\141\154",
			"\151\156\166",
			"\111\156\166\145\162\163\145\106\165\156\143\164\151\157\156\141\154",
			null, "\123\171\155\155\145\164\162\151\143",
			"\124\162\141\156\163\151\164\151\166\145", null, null, null, null,
			"\122\105\116\104\105\122\111\116\107", "\126\101\114\125\105\123",
			"\107\122\117\125\120\123", null, null, "\75", "\56", "\53", };
	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0xfe3fffffffff1881L, 0x1L, };
	static final long[] jjtoSkip = { 0x7eL, 0x0L, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[237];
	private final int[] jjstateSet = new int[474];
	protected char curChar;

	/** Constructor. */
	public OPPLParserTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error(
					"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public OPPLParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 237; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);
		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;
		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;
		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line,
					error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}
}
