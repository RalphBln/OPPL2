/* Generated By:JJTree&JavaCC: Do not edit this line. OPPLParser.java */
package org.coode.oppl.syntax;
import java.io.Reader;
import java.net.URI;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Arrays;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import org.coode.manchesterowlsyntax.ManchesterOWLSyntaxEditorParser;
import org.coode.oppl.AbstractConstraint;
import org.coode.oppl.InCollectionConstraint;
import org.coode.oppl.InCollectionRegExpConstraint;
import org.coode.oppl.InequalityConstraint;
import org.coode.oppl.OPPLAbstractFactory;
import org.coode.oppl.OPPLFactory;
import org.coode.oppl.OPPLQuery;
import org.coode.oppl.OPPLScript;
import org.coode.oppl.exceptions.OPPLException;
import org.coode.oppl.validation.OPPLScriptValidator;
import org.coode.oppl.variablemansyntax.ConstraintSystem;
import org.coode.oppl.variablemansyntax.ExpressionParser;
import org.coode.oppl.variablemansyntax.Variable;
import org.coode.oppl.variablemansyntax.VariableManchesterOWLSyntaxParser;
import org.coode.oppl.variablemansyntax.VariableScope;
import org.coode.oppl.variablemansyntax.VariableScopes;
import org.coode.oppl.variablemansyntax.VariableType;
import org.coode.oppl.variablemansyntax.VariableScopes.Direction;
import org.coode.oppl.variablemansyntax.generated.Attribute;
import org.coode.oppl.variablemansyntax.generated.AbstractCollectionGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.ConcatGeneratedValues;
import org.coode.oppl.variablemansyntax.generated.RegExpGenerated;
import org.coode.oppl.variablemansyntax.generated.VariableIndexGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.StringGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.SingleValueGeneratedValue;
import org.coode.oppl.variablemansyntax.generated.SingleValueGeneratedVariable;
import org.coode.oppl.variablemansyntax.generated.factory.AttributeFactory;
import org.semanticweb.owl.apibinding.OWLManager;
import org.semanticweb.owl.expression.ParserException;
import org.semanticweb.owl.inference.OWLReasoner;
import org.semanticweb.owl.model.AddAxiom;
import org.semanticweb.owl.model.OWLAxiom;
import org.semanticweb.owl.model.OWLAxiomChange;
import org.semanticweb.owl.model.OWLClass;
import org.semanticweb.owl.model.OWLDataProperty;
import org.semanticweb.owl.model.OWLDescription;
import org.semanticweb.owl.model.OWLObject;
import org.semanticweb.owl.model.OWLObjectProperty;
import org.semanticweb.owl.model.OWLOntology;
import org.semanticweb.owl.model.OWLOntologyManager;
import org.semanticweb.owl.model.RemoveAxiom;
import org.semanticweb.owl.model.OWLEntity;

public class OPPLParser/*@bgen(jjtree)*/implements OPPLParserTreeConstants, OPPLParserConstants {/*@bgen(jjtree)*/
  protected JJTOPPLParserState jjtree = new JJTOPPLParserState();private OWLOntologyManager owlOntologyManager;

        private OPPLAbstractFactory opplFactory = null;
        private List completions = new ArrayList();

        private OWLOntology ontology;
        private OWLReasoner reasoner;
        private OPPLScriptValidator validator=null;

        public void setOPPLScriptValidator(OPPLScriptValidator v){
                validator = v;
        }

        public List getCompletions(){
                return completions;
        }

        public OPPLAbstractFactory getOPPLFactory(){
                if(opplFactory ==null){
                        opplFactory = new OPPLFactory(owlOntologyManager, ontology, reasoner);
                }
                return opplFactory;
        }

        public void setOPPLFactory(OPPLAbstractFactory factory){
                opplFactory = factory;
        }

        public OWLOntologyManager getOWLOntologyManager(){
                return owlOntologyManager;
        }

        public void setReasoner(OWLReasoner r){
                reasoner = r;
        }

   public OPPLParser(java.io.InputStream in, OWLOntologyManager m, OWLOntology o, OWLReasoner r){
                this(in);
                owlOntologyManager = m;
                ontology = o;
                reasoner = r;
   }

        public void ReInit(Reader reader,
                        OWLOntologyManager m, OWLOntology o, OWLReasoner r){
                ReInit(reader);
                owlOntologyManager = m;
                ontology = o;
                reasoner = r;
        }

        public OPPLParser(Reader reader, OWLOntologyManager m,
                        OWLOntology o, OWLReasoner r) {
                this(reader);
                owlOntologyManager = m;
                ontology = o;
                reasoner = r;
        }

        public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        System.out.print("Enter an expression :");
        String ontologyPhysicalURI = args[0];
                OWLOntologyManager m = OWLManager.createOWLOntologyManager();
    try {
          OWLOntology o = m.loadOntology(URI.create(ontologyPhysicalURI));

      OPPLScript n = new OPPLParser(System.in, m, o, null).Start();
      System.out.println("Thank you.");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
private ParseException unexpectedException() {
        return new ParseException("Unexpected condition at line " + this.token.beginLine + " column " + this.token.beginColumn + ": " + this.token.image);
}

  final public OPPLScript Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return parse(null);}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public OPPLScript parse(ConstraintSystem cs) throws ParseException {
                                       /*@bgen(jjtree) parse */
        SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);List<Variable> variables = new ArrayList<Variable>();
        OPPLQuery opplQuery = null;
        List<OWLAxiomChange> actions = new ArrayList<OWLAxiomChange>();
        ConstraintSystem constraintSystem = cs;
        if(constraintSystem==null){constraintSystem = getOPPLFactory().createConstraintSystem();}
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        variables = VariableDeclaration(constraintSystem);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        opplQuery = query(constraintSystem);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEGIN:
        actions = Actions(constraintSystem);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        OPPLScript toReturn = getOPPLFactory().buildOPPLScript(constraintSystem, variables, opplQuery, actions);
        if(validator !=null && !validator.accept(toReturn)){
                {if (true) throw new ParseException("Failed validation "+validator.getValidationRuleDescription());}
        }
        {if (true) return toReturn;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Variable> VariableDeclaration(ConstraintSystem constraintSystem) throws ParseException {
 List<Variable> toReturn = new ArrayList<Variable>();
Variable v;
    v = VariableDefinition(constraintSystem);
                        toReturn.add(v);
                        completions.clear();
                        completions.add(",");
                        completions.add("SELECT");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
                        completions.clear();
      v = VariableDefinition(constraintSystem);
                                toReturn.add(v);
                                completions.clear();
                                completions.add(",");
                                completions.add("SELECT");
    }
         {if (true) return toReturn;}
    throw new Error("Missing return statement in function");
  }

  final public List<OWLAxiomChange> Actions(ConstraintSystem constraintSystem) throws ParseException {
                                                                 /*@bgen(jjtree) Actions */
                                                                 SimpleNode jjtn000 = new SimpleNode(JJTACTIONS);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);List<OWLAxiomChange> toReturn = new ArrayList<OWLAxiomChange>(); OWLAxiomChange action;
    try {
      jj_consume_token(BEGIN);
      action = Action(constraintSystem);
                                                          toReturn.add(action);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        action = Action(constraintSystem);
                                                          toReturn.add(action);
      }
      jj_consume_token(END);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return toReturn;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Variable VariableDefinition(ConstraintSystem constraintSystem) throws ParseException {
         /*@bgen(jjtree) VariableDefinition */
                SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDEFINITION);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token variableNameToken;
                Token variableTypeToken;
                VariableType variableType=null;
                VariableScope variableScope;
                Token directionToken=null;
                VariableScopes.Direction direction=null;
                Variable v=null;
    try {
      if (jj_2_1(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
                        completions.clear();
                        completions.addAll(EnumSet.allOf(VariableType.class));
        variableTypeToken = jj_consume_token(VARIABLETYPE);
                 variableType = VariableType.valueOfIgnoreCase(variableTypeToken.image);
        jj_consume_token(62);
        v = opplFunction(variableNameToken.image,variableType,constraintSystem);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return v;}
      } else if (jj_2_2(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
                        completions.clear();
                        completions.addAll(EnumSet.allOf(VariableType.class));
        variableTypeToken = jj_consume_token(VARIABLETYPE);
                        try{
                                variableType = VariableType.valueOfIgnoreCase(variableTypeToken.image);
                v =  constraintSystem.createVariable(variableNameToken.image,variableType);
                        }catch(OPPLException e){{if (true) throw new ParseException(e.getMessage(), e);}}
        jj_consume_token(OPENSQUAREBRACKETS);
                        completions.clear();
                        completions.addAll(EnumSet.allOf(VariableScopes.Direction.class));
        direction = direction();
        variableScope = typeScope(direction, variableType,constraintSystem);
        jj_consume_token(CLOSEDSQUAREBRACKETS);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        v.setVariableScope(variableScope, getOPPLFactory().getVariableScopeChecker());
                        {if (true) return v;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          variableNameToken = jj_consume_token(IDENTIFIER);
          jj_consume_token(COLON);
                        completions.clear();
                        completions.addAll(EnumSet.allOf(VariableType.class));
          variableTypeToken = jj_consume_token(VARIABLETYPE);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        completions.clear();
                        try{
                                variableType = VariableType.valueOfIgnoreCase(variableTypeToken.image);
                                {if (true) return constraintSystem.createVariable(variableNameToken.image,variableType);}
                        }catch(OPPLException e){{if (true) throw new ParseException(e.getMessage(), e);}}
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Variable opplFunction(String name,VariableType type, ConstraintSystem constraintSystem) throws ParseException {
        SingleValueGeneratedValue<String> value=null;
        AbstractCollectionGeneratedValue<? extends OWLObject> collection=null;
        SingleValueGeneratedVariable expressionVariable;
        SingleValueGeneratedValue<String> expression;
        Variable regexpVariable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MATCH:
      jj_consume_token(MATCH);
      jj_consume_token(OPENPARENTHESYS);
      expression = stringOperation(constraintSystem, true);
      jj_consume_token(CLOSEDPARENTHESYS);
                regexpVariable = regexpOperation(name, type, expression, constraintSystem);
                {if (true) return regexpVariable;}
      break;
    case CREATE:
      jj_consume_token(CREATE);
      jj_consume_token(OPENPARENTHESYS);
      value = stringOperation(constraintSystem, true);
      jj_consume_token(CLOSEDPARENTHESYS);
                 {if (true) return constraintSystem.createStringGeneratedVariable(name,type, value);}
      break;
    case CREATEINTERSECTION:
      jj_consume_token(CREATEINTERSECTION);
      jj_consume_token(OPENPARENTHESYS);
      collection = set(type,constraintSystem);
      jj_consume_token(CLOSEDPARENTHESYS);
                 {if (true) return constraintSystem.createIntersectionGeneratedVariable(name,type,(AbstractCollectionGeneratedValue<OWLClass>) collection);}
      break;
    case CREATEUNION:
      jj_consume_token(CREATEUNION);
      jj_consume_token(OPENPARENTHESYS);
      collection = set(type,constraintSystem);
      jj_consume_token(CLOSEDPARENTHESYS);
                 {if (true) return constraintSystem.createUnionGeneratedVariable(name,type,(AbstractCollectionGeneratedValue<OWLClass>) collection);}
      break;
    default:
      jj_la1[6] = jj_gen;
      expressionVariable = expressionGeneratedVariable(name,type,constraintSystem);
                 {if (true) return expressionVariable;}
    }
    throw new Error("Missing return statement in function");
  }

  SingleValueGeneratedVariable expressionGeneratedVariable(String name,VariableType type, ConstraintSystem constraintSystem) throws ParseException {
                                                                                                                           /*@bgen(jjtree) expressionGeneratedVariable */
SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONGENERATEDVARIABLE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {int beginningSubSection = token.beginColumn;
int beginningSubSectionLine = token.beginLine;
String expression = Utils.readString(this, false, COMMA, SELECT);
try {
        return Utils.parseVariableExpressionGeneratedVariable(name,     type, expression, constraintSystem);
} catch (ParserException e) {
Exception temp=Utils.buildException(beginningSubSection, beginningSubSectionLine, e);
throw new ParseException(temp.getMessage(), temp);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  Variable regexpOperation(String name,VariableType type, SingleValueGeneratedValue<String> expression, ConstraintSystem constraintSystem) throws ParseException {
                                                                                                                                         /*@bgen(jjtree) regexpOperation */
SimpleNode jjtn000 = new SimpleNode(JJTREGEXPOPERATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {int beginningSubSection = token.beginColumn;
int beginningSubSectionLine = token.beginLine;

//try {
//	Pattern.compile(expression);
//} catch (PatternSyntaxException e) {
//Exception temp=Utils.buildException(expression, beginningSubSection, beginningSubSectionLine, e);
//throw new ParseException(temp.getMessage(), temp);
//}
try {
        return Utils.parseRegexpGeneratedVariable(name, type, expression, constraintSystem);
} catch (ParserException e) {
Exception temp=Utils.buildException(beginningSubSection, beginningSubSectionLine, e);
throw new ParseException(temp.getMessage(), temp);
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public AbstractCollectionGeneratedValue<? extends OWLObject> set(VariableType type,ConstraintSystem constraintSystem) throws ParseException {
 Token variableNameToken=null;
    variableNameToken = jj_consume_token(IDENTIFIER);
    jj_consume_token(63);
    jj_consume_token(VALUESVARIABLEATTRIBUTE);
                        String variableName = variableNameToken.image;
                        Variable v = constraintSystem.getVariable(variableName);
                        if (v != null) {
                                if (type == v.getType()) {
                                        Attribute attribute = Attribute.VALUES;
                                        {if (true) return AttributeFactory.getCollectionGeneratedValue(attribute, v, constraintSystem);}
                                } else {{if (true) throw new ParseException("Type mismatch for variable " + v.getName() + ": type " + type + " needed instead of the actual " + v.getType());}}
                        } else {{if (true) throw new ParseException("Invalid variable name: " + variableName);}}
    throw new Error("Missing return statement in function");
  }

  final public SingleValueGeneratedValue<String> stringOperation(ConstraintSystem constraintSystem, boolean spacesAdded) throws ParseException {
 SingleValueGeneratedValue result=null;
    result = stringConcat(constraintSystem, spacesAdded);
                 {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public SingleValueGeneratedValue<String> stringConcat(ConstraintSystem constraintSystem, boolean spacesAdded) throws ParseException {
        SingleValueGeneratedValue aGeneratedValue;
        List<SingleValueGeneratedValue<String>> components = new ArrayList<SingleValueGeneratedValue<String>>();
    aGeneratedValue = generatedValue(constraintSystem, spacesAdded);
                 components.add(aGeneratedValue);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(64);
      aGeneratedValue = generatedValue(constraintSystem, spacesAdded);
                 components.add(aGeneratedValue);
    }
                 if(components.size()==1){{if (true) return aGeneratedValue;}}else{{if (true) return new ConcatGeneratedValues(components);}}
    throw new Error("Missing return statement in function");
  }

  final public SingleValueGeneratedValue generatedValue(ConstraintSystem constraintSystem, boolean spacesAdded) throws ParseException {
        String valueToken;
        Token variableNameToken;
        Token variableAttributeToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUOTE:
      jj_consume_token(QUOTE);
      valueToken = readString(spacesAdded);
      jj_consume_token(QUOTE);
                 {if (true) return new StringGeneratedValue(valueToken);}
      break;
    default:
      jj_la1[8] = jj_gen;
      if (jj_2_3(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(63);
        variableAttributeToken = jj_consume_token(RENDERINGVARIABLEATTRIBUTE);
                        String attributeString = variableAttributeToken.image;
                        String variableName = variableNameToken.image;
                        Variable v = constraintSystem.getVariable(variableName);
                        if(v !=null){
                                try {
                                        Attribute attribute = Attribute.valueOf(attributeString);
                                        {if (true) return AttributeFactory.getVariableGeneratedValue(attribute, v, constraintSystem);}
                                } catch (IllegalArgumentException e) {{if (true) throw new ParseException("Invalid attribute name: " + e.getMessage() + "; valid names are: " + Arrays.toString(Attribute.values()));}}
                }else{{if (true) throw new ParseException("Invalid variable name: "+variableName);}}
      } else if (jj_2_4(4)) {
        variableNameToken = jj_consume_token(IDENTIFIER);
        jj_consume_token(63);
        jj_consume_token(GROUPSVARIABLEATTRIBUTE);
        jj_consume_token(OPENPARENTHESYS);
        variableAttributeToken = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(CLOSEDPARENTHESYS);
                String attributeString = variableAttributeToken.image;
                String variableName = variableNameToken.image;
                Variable v = constraintSystem.getVariable(variableName);
                if (v != null) {
                        int index = Integer.parseInt(attributeString);
                        RegExpGenerated gv = (RegExpGenerated) v;
                        Set<OWLObject> bindings = gv.getPossibleBindings();
                        if (bindings.size() > 0) {
                                VariableIndexGeneratedValue toReturn=new VariableIndexGeneratedValue(gv, index, bindings);
                                {if (true) return toReturn;}
                        }
                        {if (true) throw new ParseException("No matches found for variable: " + v);}
                }else{{if (true) throw new ParseException("Invalid variable name: "+variableName);}}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  String readString(boolean spacesAdded) throws ParseException {
                                       /*@bgen(jjtree) readString */
SimpleNode jjtn000 = new SimpleNode(JJTREADSTRING);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {return Utils.readString(this, spacesAdded, QUOTE);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public VariableScopes.Direction direction() throws ParseException {
                                             Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUBCLASSOF:
      jj_consume_token(SUBCLASSOF);
                 {if (true) return Direction.SUBCLASSOF;}
      break;
    case SUB_PROPERTY_OF:
      jj_consume_token(SUB_PROPERTY_OF);
                 {if (true) return Direction.SUBPROPERTYOF;}
      break;
    case OTHERDIRECTION:
      t = jj_consume_token(OTHERDIRECTION);
                 {if (true) return Direction.getDirection(t.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  VariableScope typeScope(VariableScopes.Direction direction, VariableType variableType, ConstraintSystem constraintSystem) throws ParseException {
                                                                                                                          /*@bgen(jjtree) typeScope */
     SimpleNode jjtn000 = new SimpleNode(JJTTYPESCOPE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {int beginningSubSection = -1;
        int beginningSubSectionLine = -1;
        Token t;
        StringBuilder manSyntax = new StringBuilder();
        VariableScope toReturn = null;
        while (true) {
                t = getToken(1);
                if (beginningSubSection < 0) {
                        beginningSubSection = t.beginColumn;
                }
                if (beginningSubSectionLine < 0) {
                        beginningSubSectionLine = t.beginLine;
                }
                if (t.kind == COMMA || t.kind == CLOSEDSQUAREBRACKETS || t.kind == SEMICOLON || t.kind == BEGIN || t.kind == END || t.kind == WHERE || t.kind == EOF) {
                        break;
                } else {
                        manSyntax.append(t.image);
                        manSyntax.append(" ");
                        t = getNextToken();
                }
        }
        String manSyntaxString = manSyntax.toString().trim();
        completions.clear();
        // VariableManchesterOWLSyntaxParser parser = new
        // VariableManchesterOWLSyntaxParser(
        // manSyntaxString, constraintSystem);
        ManchesterOWLSyntaxEditorParser parser = new ManchesterOWLSyntaxEditorParser(getOWLOntologyManager().getOWLDataFactory(), manSyntaxString);
        parser.setOWLEntityChecker(getOPPLFactory().getOWLEntityChecker());
        try {
                toReturn = parseScope(direction, variableType, parser);
        } catch (ParserException e) {
                // No need to correct the column indexes on this exception, it
                // has been done near the generation point
                throw new ParseException("Failed to parse the description " + manSyntaxString, e);
        }
        return toReturn;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  VariableScope parseScope(VariableScopes.Direction direction,
                        VariableType variableType, ManchesterOWLSyntaxEditorParser parser) throws ParseException, ParserException {
                                                /*@bgen(jjtree) parseScope */
             SimpleNode jjtn000 = new SimpleNode(JJTPARSESCOPE);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {VariableScope scope = null;
                int beginningSubSection = token.beginColumn;
                int beginningSubSectionLine = token.beginLine;
                try {
                        scope = variableType.parseVariable(direction, parser);
                } catch (ParserException e) {throw Utils.buildException(beginningSubSection, beginningSubSectionLine, e);}
                return scope;/*@bgen(jjtree)*/
             } catch (Throwable jjte000) {
               if (jjtc000) {
                 jjtree.clearNodeScope(jjtn000);
                 jjtc000 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte000 instanceof ParserException) {
                 throw (ParserException)jjte000;
               }
               throw (Error)jjte000;
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
  }

  final public AbstractConstraint Constraint(ConstraintSystem constraintSystem) throws ParseException {
 /*@bgen(jjtree) Constraint */
 SimpleNode jjtn000 = new SimpleNode(JJTCONSTRAINT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
OWLObject owlObject;
Variable variable;
Set<OWLObject> owlObjects = new HashSet<OWLObject>();
Set<OWLEntity> matches = new HashSet<OWLEntity>();
InCollectionRegExpConstraint regexpConstraint;
    try {
      t = jj_consume_token(IDENTIFIER);
                        variable = constraintSystem.getVariable(t.image);
                        if(variable==null){{if (true) throw new ParseException("Undeclared variable "+t.image);}}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATCH:
        jj_consume_token(MATCH);
        jj_consume_token(OPENPARENTHESYS);
        regexpConstraint = matchConstraint(variable, constraintSystem, stringOperation(constraintSystem, true));
        jj_consume_token(CLOSEDPARENTHESYS);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return regexpConstraint;}
        break;
      case NEQ:
        jj_consume_token(NEQ);
        owlObject = OWLExpression(variable, constraintSystem);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return new InequalityConstraint(variable, owlObject,constraintSystem);}
        break;
      case IN:
        jj_consume_token(IN);
        jj_consume_token(OPENCURLYBRACKETS);
        owlObject = OWLExpression(variable,constraintSystem);
                 owlObjects.add(owlObject);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          owlObject = OWLExpression(variable,constraintSystem);
                 owlObjects.add(owlObject);
        }
        jj_consume_token(CLOSEDCURLYBRACKETS);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return new InCollectionConstraint(variable,owlObjects, constraintSystem);}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  InCollectionRegExpConstraint matchConstraint(Variable variable, ConstraintSystem cs, SingleValueGeneratedValue expression) throws ParseException {
                                                                                                                           /*@bgen(jjtree) matchConstraint */
SimpleNode jjtn000 = new SimpleNode(JJTMATCHCONSTRAINT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {int beginningSubSection = getToken(1).beginColumn;
int beginningSubSectionLine = getToken(1).beginLine;
//String expression = Utils.readString(this, true, QUOTE);
try {
        return  new InCollectionRegExpConstraint(variable, expression, cs);
} catch (PatternSyntaxException e) {
Exception temp=Utils.buildException(expression, beginningSubSection, beginningSubSectionLine, e);
throw new ParseException(temp.getMessage(), temp);
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  OWLObject OWLExpression(Variable v, ConstraintSystem constraintSystem) throws ParseException {
 /*@bgen(jjtree) OWLExpression */
             SimpleNode jjtn000 = new SimpleNode(JJTOWLEXPRESSION);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
             try {Token t;
                String manSyntaxString="";
                while(true){
                        t = getToken(1);
                        if (t.kind==COMMA || t.kind ==CLOSEDCURLYBRACKETS || t.kind==SEMICOLON || t.kind==BEGIN || t.kind==END || t.kind == WHERE || t.kind == EOF){
                                break;
                        }else{
                                manSyntaxString += t.image+" ";
                                t = getNextToken();
                        }
                }
        manSyntaxString = manSyntaxString.trim();
        ExpressionParser expressionParser = new ExpressionParser(manSyntaxString, constraintSystem);
        try{
        OWLObject toReturn = v.accept(expressionParser);
        return toReturn;
        } catch(Exception e){throw new ParseException(e.getMessage(), e);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc000) {
                 jjtree.closeNodeScope(jjtn000, true);
               }
             }
  }

  final public VariableType variableType() throws ParseException {
                                   Token t;
    t = jj_consume_token(VARIABLETYPE);
                 {if (true) return VariableType.valueOfIgnoreCase(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public OPPLQuery query(ConstraintSystem constraintSystem) throws ParseException {
                                                    /*@bgen(jjtree) query */
        SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);OPPLQuery toReturn = getOPPLFactory().buildNewQuery(constraintSystem);
        AbstractConstraint c;
    try {
      jj_consume_token(SELECT);
                 completions.clear();
      queryAtom(toReturn,constraintSystem);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
                 completions.clear();
        queryAtom(toReturn,constraintSystem);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        c = Constraint(constraintSystem);
                 toReturn.addConstraint(c);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          c = Constraint(constraintSystem);
                 toReturn.addConstraint(c);
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return toReturn;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void queryAtom(OPPLQuery query, ConstraintSystem constraintSystem) throws ParseException {
                                                                           OWLAxiom axiom;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSERTED:
      jj_consume_token(ASSERTED);
      axiom = Clause(constraintSystem);
                 query.addAssertedAxiom(axiom);
      break;
    default:
      jj_la1[15] = jj_gen;
      axiom = Clause(constraintSystem);
                 query.addAxiom(axiom);
    }
  }

  final public OWLAxiomChange Action(ConstraintSystem constraintSystem) throws ParseException {
                                                          /*@bgen(jjtree) Action */
                                                          SimpleNode jjtn000 = new SimpleNode(JJTACTION);
                                                          boolean jjtc000 = true;
                                                          jjtree.openNodeScope(jjtn000);OWLAxiom axiom;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        axiom = Clause(constraintSystem);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return new AddAxiom(constraintSystem.getOntology(), axiom);}
        break;
      case REMOVE:
        jj_consume_token(REMOVE);
        axiom = Clause(constraintSystem);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return new RemoveAxiom(constraintSystem.getOntology(), axiom);}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  OWLAxiom Clause(ConstraintSystem constraintSystem) throws ParseException {
                                                   /*@bgen(jjtree) Clause */
     SimpleNode jjtn000 = new SimpleNode(JJTCLAUSE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {int beginningSubSection = -1;
        int beginningSubSectionLine = -1;
        OWLAxiom toReturn =null;
        String manSyntaxString="";
        Token t;
                while(true){
                        t = getToken(1);
                        if (beginningSubSection < 0) {beginningSubSection = t.beginColumn;}
                        if (beginningSubSectionLine < 0) {beginningSubSectionLine = t.beginLine;}
                        if (t.kind==COMMA || t.kind==SEMICOLON || t.kind==BEGIN || t.kind==END || t.kind == WHERE || t.kind == EOF){
                                break;
                        }else{
                                manSyntaxString += t.image+" ";
                                t = getNextToken();
                        }
                }
        manSyntaxString = manSyntaxString.trim();
        VariableManchesterOWLSyntaxParser parser = new VariableManchesterOWLSyntaxParser(manSyntaxString, constraintSystem
                                        );
        //parser.setOWLEntityChecker(getOPPLFactory().getOWLEntityChecker());
        try{
                toReturn = parser.parseAxiom();

        }catch(ParserException e){
        Exception ex=Utils.buildException(beginningSubSection, beginningSubSectionLine, e);
        throw new ParseException("OPPLParser.Clause() \u005c"" + manSyntaxString + "\u005c"\u005ct" + ex.getMessage(), ex);
        }
return toReturn;/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(GROUPSVARIABLEATTRIBUTE)) return true;
    if (jj_scan_token(OPENPARENTHESYS)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(RENDERINGVARIABLEATTRIBUTE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLETYPE)) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(VARIABLETYPE)) return true;
    if (jj_scan_token(OPENSQUAREBRACKETS)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public OPPLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x200000,0x4000000,0x10000000,0x10000000,0x1000,0xf0000,0x0,0x0,0x0,0x10000000,0x80000,0x10000000,0x10000000,0x400000,0x800000,0x3000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x240800,0x0,0x300,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public OPPLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OPPLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OPPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public OPPLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OPPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public OPPLParser(OPPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(OPPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
